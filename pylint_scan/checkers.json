[
  {
    "checkerName": "abstract-class-instantiated",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an abstract class with abc.ABCMeta as metaclass has abstract methods and is instantiated.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "abstract-method",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "access-member-before-definition",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an instance member is accessed before it's actually assigned.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "anomalous-backslash-in-string",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a backslash is in a literal string but not as an escape.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "anomalous-unicode-escape-in-string",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an escape like \\u is encountered in a byte string where it has no effect.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "arguments-differ",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a method has a different number of arguments than in the implemented interface or in an overridden method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "assert-on-tuple",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "assigning-non-slot",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when assigning to an attribute not defined in the class slots.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "assignment-from-no-return",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an assignment is done on a function call but the inferred function doesn't return anything.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "assignment-from-none",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an assignment is done on a function call but the inferred function returns nothing but None.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "astroid-error",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors !",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "attribute-defined-outside-init",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an instance attribute is defined outside the init method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-classmethod-argument",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-continuation",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Wrong continued indentation before block (add 4 spaces).[tencent standards/python 1.1.2](https://{github.com/xxxxx}/standards/python#11-%E7%BC%A9%E8%BF%9B)",
    "checkerDescModel": "Wrong continued indentation before block (add 4 spaces)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-except-order",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-exception-context",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when using the syntax \"raise ... from ...\", where the exception context is not an exception, nor None. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-format-character",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a unsupported format character is used in a format string.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-format-string",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string is invalid. This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-format-string-key",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-indentation",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when an unexpected number of indentation's tabulations or spaces has been found.[tencent standards/python 1.1.1](https://{github.com/xxxxx}/standards/python#11-%E7%BC%A9%E8%BF%9B)",
    "checkerDescModel": "Used when an unexpected number of indentation's tabulations or spaces has been found.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-inline-option",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an inline option is either badly formatted or can't be used inside modules.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-mcs-classmethod-argument",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-mcs-method-argument",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-open-mode",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-option-value",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a bad value for an inline option is encountered.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-reversed-sequence",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when the first argument to reversed() builtin isn't a sequence (does not implement reversed, nor getitem and len",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-space-indentation",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when an unexpected number of indentation's spaces has been found(the default threshold is 4).",
    "checkerDescModel": "Used when an unexpected number of indentation's spaces has been found(the default threshold is %s).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "space-indent-size",
        "propValue": "4",
        "displayValue": "4"
      }
    ]
  },
  {
    "checkerName": "bad-staticmethod-argument",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a static method has \"self\" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-str-strip-call",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "The argument to a str.{l,r,}strip call contains a duplicate character,",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-super-call",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when another argument than the current class is given as first argument of the super builtin.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bad-whitespace",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a wrong number of spaces is used around an operator, bracket or block opener.[tencent standards/python 1.3.1](https://{github.com/xxxxx}/standards/python#13-%E7%A9%BA%E7%99%BD%E7%AC%A6)",
    "checkerDescModel": "Used when a wrong number of spaces is used around an operator, bracket or block opener.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "bare-except",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an except clause doesn't specify exceptions type to catch.[tencent standards/python 2.4.3](https://{github.com/xxxxx}/standards/python#24-%E5%BC%82%E5%B8%B8)",
    "checkerDescModel": "Used when an except clause doesn't specify exceptions type to catch.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "binary-op-exception",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when the exception to catch is of the form \"except A or B:\". If intending to catch multiple, rewrite as \"except (A, B):\"",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "blacklisted-name",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when the name is listed in the black list (unauthorized names).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "broad-except",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an except catches a too general exception, possibly burying unrelated errors.[tencent standards/python 2.4.3](https://{github.com/xxxxx}/standards/python#24-%E5%BC%82%E5%B8%B8)",
    "checkerDescModel": "Used when an except catches a too general exception, possibly burying unrelated errors.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "c-extension-no-member",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerDesc": "Alternatively, since pylint emits a separate error for attributes that cannot be found in C extensions, c-extension-no-member, you can disable this error for your project.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "catching-non-exception",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a class which doesn't inherit from Exception is used as an exception in an except clause.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "cell-var-from-loop",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "confusing-with-statement",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Emitted when a with statement component returns multiple values and uses name binding with as only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "consider-iterating-dictionary",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in \"for key in dictionary\".",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "consider-merging-isinstance",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when multiple consecutive isinstance calls can be merged into one.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "consider-using-enumerate",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "consider-using-ternary",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when one of known pre-python 2.5 ternary syntax is used.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "continue-in-finally",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when the continue keyword is found inside a finally clause, which is a SyntaxError.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "cyclic-import",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a cyclic import between two or more modules is detected.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "dangerous-default-value",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a mutable value as list or dictionary is detected in a default value for an argument.[tencent standards/python 2.8.2](https://{github.com/xxxxx}/standards/python#28-%E5%87%BD%E6%95%B0)",
    "checkerDescModel": "Used when a mutable value as list or dictionary is detected in a default value for an argument.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "deprecated-method",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "deprecated-module",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used a module marked as deprecated is imported.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "deprecated-pragma",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint >= 0.26",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "duplicate-argument-name",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Duplicate argument names in function definitions are syntax errors.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "duplicate-bases",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a class has duplicate bases.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "duplicate-code",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "duplicate-except",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an except catches a type that was already caught by a previous handler.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "duplicate-key",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a dictionary expression binds the same key multiple times.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "empty-docstring",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a module, function, class or method has an empty docstring (it would be too easy ;).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "eval-used",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when you use the \"eval\" function, to discourage its usage. Consider using ast.literal_eval for safely evaluating strings containing Python expressions from untrusted sources.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "exec-used",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when you use the \"exec\" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "expression-not-assigned",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "fatal",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "used when an error occurred preventing the analysis of a module (unable to find it for instance).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "file-ignored",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used to inform that the file will not be checked",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "fixme",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a warning note as FIXME or XXX is detected.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "format-combined-specification",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}'). This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "format-needs-mapping",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "function-name-too-long",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when a name is longer than a given number of characters(the threshold is 35).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "function-redefined",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function / class / method is redefined.[tencent standards/python 2.8.1](https://{github.com/xxxxx}/standards/python#28-%E5%87%BD%E6%95%B0)",
    "checkerDescModel": "Used when a function / class / method is redefined.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "global-at-module-level",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when you use the \"global\" statement at the module level since it has no effect",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "global-statement",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when you use the \"global\" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "global-variable-not-assigned",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a variable is defined through the \"global\" statement but no assignment to this variable is done.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "global-variable-undefined",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "import-error",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when pylint has been unable to import a module.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "import-self",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a module is importing itself.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "inconsistent-mro",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a class has an inconsistent method resolution order.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "inherit-non-class",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a class inherits from something which is not a class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "init-is-generator",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when the special class method init is turned into a generator by a yield in its body.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-all-object",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an invalid (non-string) object occurs in all.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-characters-in-docstring",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a word in docstring cannot be checked by enchant.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-format-index",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute. This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-length-returned",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an len method returns something which is not a non-negative integer",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-metaclass",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-name",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).  [tencent standards/python 1.18.1](https://{github.com/xxxxx}/standards/python#118-%E5%91%BD%E5%90%8D)",
    "checkerDescModel": "Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-sequence-index",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an index method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-slice-index",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a slice index is not an integer, None, or an object with an index method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-slots",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an invalid slots is found in class. Only a string, an iterable or a sequence is permitted.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-slots-object",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an invalid (non-string) object occurs in slots.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-star-assignment-target",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a star expression is used as a starred assignment target. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "invalid-unary-operand-type",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a unary operand is used on an object which does not support this type of operation",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "len-as-condition",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when Pylint detects incorrect use of len(sequence) inside conditions.[tencent standards/python 2.6.2](https://{github.com/xxxxx}/standards/python#26-truefalse-%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97)",
    "checkerDescModel": "Used when Pylint detects incorrect use of len(sequence) inside conditions.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "line-too-long",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a line is longer than a given number of characters.[tencent standards/python 1.2.1](https://{github.com/xxxxx}/standards/python#12-%E6%AF%8F%E8%A1%8C%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6)",
    "checkerDescModel": "Used when a line is longer than a given number of characters.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": [
      {
        "propName": "max-line-length",
        "propValue": "120",
        "displayValue": "120"
      }
    ]
  },
  {
    "checkerName": "line-too-long-tosa",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when a line is longer than a given number of characters(the default threshold is 120).",
    "checkerDescModel": "Used when a line is longer than a given number of characters(the default threshold is %s).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "max-line-length",
        "propValue": "120",
        "displayValue": "120"
      }
    ]
  },
  {
    "checkerName": "literal-comparison",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "locally-disabled",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when an inline option disables a message or a messages category.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "locally-enabled",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when an inline option enables a message or a messages category.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-format-interpolation",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a logging statement has a call form of \"logging.method>(format_string.format(format_args...))\". Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-format-truncated",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a logging statement format string terminates before the end of a conversion specifier.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-not-lazy",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a logging statement has a call form of \"logging.(format_string % (format_args...))\". Such calls should leave string interpolation to the logging method itself and be written \"logging.(format_string, format_args...)\" so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-too-few-args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a logging format string is given too few arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-too-many-args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a logging format string is given too many arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "logging-unsupported-format",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an unsupported format character is used in a logging statement format string.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "lost-exception",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "low-comment-ratio",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when the comment ratio is lower than expected(the threshold is 10%).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "method-check-failed",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "method-hidden",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "misplaced-bare-raise",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "misplaced-comparison-constant",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "misplaced-future",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Python 2.5 and greater require future import to be the first non docstring statement in the module.[tencent standards/python 1.10.2](https://{github.com/xxxxx}/standards/python#110-%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E9%AD%94%E6%9C%AF%E5%8F%98%E9%87%8Fdunders)",
    "checkerDescModel": "Python 2.5 and greater require future import to be the first non docstring statement in the module.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-docstring",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a module, function, class or method has no docstring.Some special methods like init doesn't necessary require a docstring.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-final-newline",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when the last line in a file is missing a newline.[tencent standards/python 1.6.3](https://{github.com/xxxxx}/standards/python#16-%E7%A9%BA%E8%A1%8C)",
    "checkerDescModel": "Used when the last line in a file is missing a newline.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-format-argument-key",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords. This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-format-attribute",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute. This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-format-string-key",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-kwoa",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function call does not pass a mandatory keyword-only argument. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "missing-license",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when a file has no license.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "mixed-format-string",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "mixed-indentation",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when there are some mixed tabs and spaces in a module.[tencent standards/python 1.1.1](https://{github.com/xxxxx}/standards/python#11-%E7%BC%A9%E8%BF%9B)",
    "checkerDescModel": "Used when there are some mixed tabs and spaces in a module.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "mixed-line-endings",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "[tencent standards/python 1.7.2](https://{github.com/xxxxx}/standards/python#17-%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81)\nUsed when there are mixed (LF and CRLF) newline signs in a file.",
    "checkerDescModel": "Used when there are mixed (LF and CRLF) newline signs in a file.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "multiple-imports",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when import statement importing multiple modules is detected.[tencent standards/python 1.9.1](https://{github.com/xxxxx}/standards/python#19-%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8import)",
    "checkerDescModel": "Used when import statement importing multiple modules is detected.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "multiple-statements",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when more than on statement are found on the same line.[tencent standards/python 1.6.4](https://{github.com/xxxxx}/standards/python#16-%E7%A9%BA%E8%A1%8C)",
    "checkerDescModel": "Used when more than on statement are found on the same line.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-classmethod-decorator",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a class method is defined without using the decorator syntax.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-else-return",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-init",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a class has no init method, neither its parent classes.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-member",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a variable is accessed for an unexistent member.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-method-argument",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a method which should have the bound instance as first argument has no argument defined.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-name-in-module",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a name cannot be found in a module.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-self-argument",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-self-use",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a method doesn't use its bound instance, and so could be written as a function.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-staticmethod-decorator",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a static method is defined without using the decorator syntax.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "no-value-for-parameter",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function call passes too few arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "non-iterator-returned",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an iter method returns something which is not an iterable (i.e. has no __next__ method)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "non-parent-init-called",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an init method is called on a class which is not in the direct ancestors for the analysed class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "nonexistent-operator",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when you attempt to use the C-style pre-increment orpre-decrement operator -- and ++, which doesn't exist in Python.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "nonlocal-and-global",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a name is both nonlocal and global. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "nonlocal-without-binding",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-a-mapping",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a non-mapping value is used in place where mapping is expected",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-an-iterable",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a non-iterable value is used in place where iterable is expected",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-async-context-manager",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-callable",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an object being called has been inferred to a non callable object",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-context-manager",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an instance in a with statement doesn't implement the context manager protocol(enter/exit).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "not-in-loop",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when break or continue keywords are used outside a loop.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "notimplemented-raised",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when NotImplemented is raised instead of NotImplementedError",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "parse-error",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an exception occured while building the Astroid representation which could be handled by astroid.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "pointless-statement",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a statement doesn't have (or at least seems to) any effect.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "pointless-string-statement",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a string is used as a statement (which of course has no effect).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "protected-access",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "raising-bad-type",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when something which is neither a class, an instance or a string is raised (i.e. a TypeError will be raised).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "raising-non-exception",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a new style class which doesn't inherit from BaseException is raised.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "raw-checker-failed",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used to inform that a built-in module has not been checked using the raw checkers.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redefine-in-handler",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an exception handler assigns the exception to an existing name",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redefined-argument-from-local",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redefined-builtin",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a variable or function override a built-in.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redefined-outer-name",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a variable's name hide a name defined in the outer scope.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redundant-keyword-arg",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "redundant-unittest-assert",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "reimported",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a module is reimported multiple times.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "relative-beyond-top-level",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a relative import tries to access too many levels in the curren package.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "repeated-keyword",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a function call got multiple values for a keyword.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "return-in-init",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when the special class method init has an explicit return value.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "return-outside-function",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a \"return\" statement is found outside a function or method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "signature-differs",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a method signature is different than in the implemented interface or in an overridden method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "simplifiable-if-statement",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an if statement can be replaced with 'bool(test)'.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "single-string-used-for-slots",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a class slots is a simple string, rather than an iterable.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "singleton-comparison",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when an expression is compared to singleton values like True, False or None.[tencent standards/python 2.6.1](https://{github.com/xxxxx}/standards/python#26-truefalse-%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97)",
    "checkerDescModel": "Used when an expression is compared to singleton values like True, False or None.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "star-needs-assignment-target",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a star expression is not used in an assignment target. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "super-init-not-called",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an ancestor class method has an init method which is not called by a derived class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "superfluous-parens",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a single item in parentheses follows an if, for, or other keyword.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "suppressed-message",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "syntax-error",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a syntax error is raised for a module.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-few-format-args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string that uses unnamed conversion specifiers is given too few arguments",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-few-public-methods",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when class has too few public methods, so be sure it's really worth it.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-ancestors",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-arguments",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method takes too many arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-boolean-expressions",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a if statement contains too many boolean expressions",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-branches",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method has too many branches, making it hard to follow.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-format-args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string that uses unnamed conversion specifiers is given too many arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-function-args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function call passes too many positional arguments.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-instance-attributes",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-lines",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a module has too much lines, reducing its readability.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-locals",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method has too many local variables.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-nested-blocks",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-public-methods",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-return-statements",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method has too many return statement, making it hard to follow.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-star-expressions",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when there are more than one starred expressions (*x) in an assignment. This is a SyntaxError. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "too-many-statements",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method has too many statements. You should then split it in smaller functions / methods.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "trailing-comma-tuple",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple. This message can't be emitted when using Python < 3.0.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "trailing-newlines",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when there are trailing blank lines in a file.[tencent standards/python 1.6.3](https://{github.com/xxxxx}/standards/python#16-%E7%A9%BA%E8%A1%8C)",
    "checkerDescModel": "Used when there are trailing blank lines in a file.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "trailing-whitespace",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when there is whitespace between the end of a line and the newline.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "truncated-format-string",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a format string terminates before the end of a conversion specifier.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unbalanced-tuple-unpacking",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when there is an unbalanced tuple unpacking in assignment",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "undefined-all-variable",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an undefined variable name is referenced in all.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "undefined-loop-variable",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "undefined-variable",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an undefined variable is accessed.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unexpected-file-encoding",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "Used when a name is longer than a given number of characters(the threshold is 35).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unexpected-keyword-arg",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unexpected-line-ending-format",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when there is different newline than expected.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": [
      {
        "propName": "expected-line-ending-format",
        "propValue": "LF",
        "displayValue": "LF"
      }
    ]
  },
  {
    "checkerName": "unexpected-line-ending-format-tosa",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "惯例",
    "checkerTypeSort": "2",
    "checkerDesc": "[tencent standards/python 1.7.2](https://{github.com/xxxxx}/standards/python#17-%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81)\nUsed when there is different newline than expected(use LF, no CR).",
    "checkerDescModel": "Used when there is different newline than expected(use LF, no CR).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "expected-line-ending-format",
        "propValue": "LF",
        "displayValue": "LF"
      }
    ]
  },
  {
    "checkerName": "unexpected-special-method-signature",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "ungrouped-imports",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when imports are not grouped by packages",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unidiomatic-typecheck",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "he idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type == Y, type is Y. Though there are unusual situations where these give different results.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unnecessary-lambda",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unnecessary-pass",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a \"pass\" statement that can be avoided is encountered.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unnecessary-semicolon",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;).",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unneeded-not",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a boolean expression contains an unneeded negation.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unpacking-non-sequence",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when something which is not a sequence is used in an unpack assignment",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unreachable",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unrecognized-inline-option",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an unknown inline option is encountered.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unsubscriptable-object",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a subscripted value doesn't support subscription(i.e. doesn't define getitem method)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unsupported-assignment-operation",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when an object does not support item assignment (i.e. doesn't define setitem method)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unsupported-binary-operation",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a binary arithmetic operation between two operands is not supported.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unsupported-delete-operation",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when an object does not support item deletion (i.e. doesn't define delitem method)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unsupported-membership-test",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when an instance in membership test expression doesn't implement membership protocol (contains/iter/getitem)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-argument",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a function or method argument is not used.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-format-string-argument",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string. This message can't be emitted when using Python < 2.7.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-format-string-key",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-import",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an imported module or variable is not used.[tencent standards/python 1.9.4](https://{github.com/xxxxx}/standards/python#19-%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8import)",
    "checkerDescModel": "Used when an imported module or variable is not used.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-variable",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when a variable is defined but not used.[tencent standards/python 2.9.1](https://{github.com/xxxxx}/standards/python#29-%E5%8F%98%E9%87%8F)",
    "checkerDescModel": "Used when a variable is defined but not used.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused-wildcard-import",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when an imported module or variable is not used from a 'from X import *' style import.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "used-before-assignment",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a local variable is accessed before it's assignment.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "useless-else-on-loop",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "useless-super-delegation",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "useless-suppression",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Reported when a message is explicitly disabled for a line or a block of code, but never triggered.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "using-constant-test",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "wildcard-import",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "8",
    "checkerDesc": "Used when from module import * is detected.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "wrong-import-order",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports).[tencent standards/python 1.9.2](https://{github.com/xxxxx}/standards/python#19-%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8import)",
    "checkerDescModel": "Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "wrong-import-position",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when code and imports are mixed",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "wrong-spelling-in-comment",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a word in comment is not spelled correctly.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "wrong-spelling-in-docstring",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "Used when a word in docstring is not spelled correctly.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规范"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "yield-inside-async-function",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when an yield or yield from statement is found inside an async function. This message can't be emitted when using Python < 3.5.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "yield-outside-function",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeSort": "4",
    "checkerDesc": "Used when a \"yield\" statement is found outside a function or method.",
    "checkerLanguage": [
      "PYTHON"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  }
]