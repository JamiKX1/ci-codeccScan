[
  {
    "checkerDesc": "Some values of the enum are not processed inside 'switch' statement and are handled via default section",
    "checkerName": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert local variable or field to constant (private accessibility)",
    "checkerName": "ConvertToConstant.Local",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-public member in implementation class hides default implementation in interface",
    "checkerName": "MemberHidesInterfaceMemberWithDefaultImplementation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Loop can be converted into LINQ-expression",
    "checkerName": "LoopCanBeConvertedToQuery",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use compound assignment",
    "checkerName": "ConvertToCompoundAssignment",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Symbol from module that might be missing at runtime",
    "checkerName": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type parameter could be declared as covariant or contravariant",
    "checkerName": "TypeParameterCanBeVariant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A previous catch clause already catches all exceptions",
    "checkerName": "CSharpWarnings::CS1058",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing '.ConfigureAwait(false)' for async disposable in library code",
    "checkerName": "UseConfigureAwaitFalseForAsyncDisposable",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Value assigned to a property of non-variable qualifier expression can be lost",
    "checkerName": "PossibleStructMemberModificationOfNonVariableStruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around statement braces)",
    "checkerName": "BadControlBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join null check with assignment (when possible)",
    "checkerName": "JoinNullCheckWithUsageWhenPossible",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable can be declared as non-nullable",
    "checkerName": "VariableCanBeNotNullable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Dependency for plugin is missing in project file",
    "checkerName": "CSharpMissingPluginDependency",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
    "checkerName": "CSharpWarnings::CS1066",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Actual shift count equals zero.",
    "checkerName": "ShiftExpressionRealShiftCountIsZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty argument list on object creation expression",
    "checkerName": "RedundantEmptyObjectCreationArgumentList",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'Attribute' suffix",
    "checkerName": "RedundantAttributeSuffix",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Conditional access qualifier expression is known to be null or not null",
    "checkerName": "ConstantConditionalAccessQualifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Math.Abs() argument is always non-negative",
    "checkerName": "MathAbsMethodIsRedundant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant conditional ternary expression usage",
    "checkerName": "RedundantTernaryExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant lambda signature parentheses",
    "checkerName": "RedundantLambdaSignatureParentheses",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class with virtual (overridable) members never inherited (non-private accessibility)",
    "checkerName": "ClassWithVirtualMembersNeverInherited.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Co-variant array conversion",
    "checkerName": "CoVariantArrayConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
    "checkerName": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made static (shared) (non-private accessibility)",
    "checkerName": "MemberCanBeMadeStatic.Global",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type specified in '[BaseTypeRequired]' attribute conflicts another type",
    "checkerName": "RequiredBaseTypesDirectConflict",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Collection is never updated (non-private accessibility)",
    "checkerName": "CollectionNeverUpdated.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to FirstOrDefault(..)",
    "checkerName": "ReplaceWithSingleCallToFirstOrDefault",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Required base type conflicting another type",
    "checkerName": "RequiredBaseTypesConflict",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter occurs after interpolated string handler parameter in the parameter list.",
    "checkerName": "CSharpWarnings::CS8947",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Adjust modifiers declaration order",
    "checkerName": "ArrangeModifiersOrder",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Explicit delegate creation expression is redundant",
    "checkerName": "RedundantDelegateCreation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style for discard declaration",
    "checkerName": "SuggestDiscardDeclarationVarStyle",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unnecessary whitespace at the end of line",
    "checkerName": "UnnecessaryWhitespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused parameter (private accessibility)",
    "checkerName": "UnusedParameter.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around semicolon)",
    "checkerName": "BadSemicolonSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'with' expression to copy record",
    "checkerName": "UseWithExpressionToCopyRecord",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Underlying type of enum is 'int'",
    "checkerName": "EnumUnderlyingTypeIsInt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible mistaken argument",
    "checkerName": "PossibleMistakenArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type argument doesn't match 'notnull' constraint.",
    "checkerName": "CSharpWarnings::CS8714",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Code is unreachable",
    "checkerName": "CSharpWarnings::CS0162",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible comparison of value type with 'null'",
    "checkerName": "CompareNonConstrainedGenericWithNull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Implicitly unspecified null values",
    "checkerName": "NUnit.ImplicitUnspecifiedNullValues",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid XML documentation comment",
    "checkerName": "InvalidXmlDocComment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'??' condition is known to be null or not null",
    "checkerName": "ConstantNullCoalescingCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Specified attribute values produce too many tests",
    "checkerName": "NUnit.AttributeProducesTooManyTests",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single assignment",
    "checkerName": "ReplaceWithSingleAssignment.True",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Tail recursive call can be replaced with loop",
    "checkerName": "TailRecursiveCall",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'is' operator",
    "checkerName": "UseIsOperator.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'is' operator",
    "checkerName": "UseIsOperator.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Mismatch of optional parameter value in overridden method",
    "checkerName": "OptionalParameterHierarchyMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Single()",
    "checkerName": "ReplaceWithOfType.Single.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Single() (replace with OfType<T>().Single(..))",
    "checkerName": "ReplaceWithOfType.Single.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using stackalloc inside loop",
    "checkerName": "StackAllocInsideLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return value of iterator is not used",
    "checkerName": "IteratorMethodResultIsIgnored",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around declaration braces)",
    "checkerName": "BadDeclarationBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Mismatch of the range step sign",
    "checkerName": "NUnit.RangeStepSignMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'ref' or 'out' parameter with [Optional] attribute",
    "checkerName": "OptionalParameterRefOut",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Event unsubscription via anonymous delegate",
    "checkerName": "EventUnsubscriptionViaAnonymousDelegate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'#warning' directive",
    "checkerName": "CSharpWarnings::CS1030",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Given expression is always of the provided type",
    "checkerName": "CSharpWarnings::CS0183",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use nullable annotation instead of an attribute.",
    "checkerName": "UseNullableAnnotationInsteadOfAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Given expression is never of the provided type",
    "checkerName": "CSharpWarnings::CS0184",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'with' expression to copy anonymous object",
    "checkerName": "UseWithExpressionToCopyAnonymousObject",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove ToList()",
    "checkerName": "RemoveToList.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove ToList()",
    "checkerName": "RemoveToList.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Entity is only used to capture its name (private accessibility)",
    "checkerName": "EntityNameCapturedOnly.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Component of the tuple is never used",
    "checkerName": "UnusedTupleComponentInReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible infinite inheritance",
    "checkerName": "PossibleInfiniteInheritance",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Shift expression with zero left operand equals zero.",
    "checkerName": "ShiftExpressionZeroLeftOperand",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method has async overload",
    "checkerName": "MethodHasAsyncOverload",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)",
    "checkerName": "StringStartsWithIsCultureSpecific",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Non-public test method",
    "checkerName": "NUnit.NonPublicMethodWithTestAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit nullable type creation",
    "checkerName": "RedundantExplicitNullableCreation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration nullability inferred (type member is inferred to be not null)",
    "checkerName": "AnnotateNotNullTypeMember",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Literal's length can be reduced by using verbatim string",
    "checkerName": "UseVerbatimString",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert negated 'is' expression to 'is' expression with negated pattern",
    "checkerName": "UseNegatedPatternInIsExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert static method invocation to extension method call",
    "checkerName": "InvokeAsExtensionMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Taking address of marshal-by-reference class field",
    "checkerName": "CSharpWarnings::CS0197",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Async iterator invocation without 'await foreach'",
    "checkerName": "AsyncIteratorInvocationWithoutAwaitForeach",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace if statement with null-propagating code",
    "checkerName": "UseNullPropagation",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return value of [MustUseReturnValue] annotated method is not used",
    "checkerName": "MustUseReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed local variable",
    "checkerName": "NotAccessedVariable.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Multiple sequential 'OrderBy' invocation",
    "checkerName": "MultipleOrderBy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Test case source must be non-abstract and implement IEnumerable",
    "checkerName": "NUnit.TestCaseSourceShouldImplementIEnumerable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Collection is never updated (private accessibility)",
    "checkerName": "CollectionNeverUpdated.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty finally block",
    "checkerName": "RedundantEmptyFinallyBlock",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function never returns",
    "checkerName": "FunctionNeverReturns",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Element is localizable",
    "checkerName": "LocalizableElement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge nested property patterns",
    "checkerName": "MergeNestedPropertyPatterns",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Annotation duplicate in hierarchy",
    "checkerName": "AnnotationRedundancyInHierarchy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call to base member with implicit default parameters",
    "checkerName": "BaseMethodCallWithDefaultParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Avoid using 'async' lambda when delegate type returns 'void'",
    "checkerName": "AsyncVoidLambda",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "[ThreadStatic] doesn't work with instance fields",
    "checkerName": "ThreadStaticAtInstanceField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join null check with assignment",
    "checkerName": "JoinNullCheckWithUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert to lambda expression (when possible)",
    "checkerName": "ConvertToLambdaExpressionWhenPossible",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string.",
    "checkerName": "CSharpWarnings::CS8094",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inline temporary variable",
    "checkerName": "InlineTemporaryVariable",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Static member initializer refers to static member below or in other part",
    "checkerName": "StaticMemberInitializerReferesToMemberBelow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'base.' qualifier",
    "checkerName": "RedundantBaseQualifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant [AttributeUsage] attribute property assignment",
    "checkerName": "RedundantAttributeUsageProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Similar expressions comparison",
    "checkerName": "EqualExpressionComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace 'Substring' with range indexer",
    "checkerName": "ReplaceSubstringWithRangeIndexer",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'is'",
    "checkerName": "RedundantIsBeforeRelationalPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty object or collection initializer",
    "checkerName": "RedundantEmptyObjectOrCollectionInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Private field can be converted to local variable",
    "checkerName": "PrivateFieldCanBeConvertedToLocalVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made protected (non-private accessibility)",
    "checkerName": "MemberCanBeProtected.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Test case Result property duplicates ExpectedResult",
    "checkerName": "NUnit.TestCaseResultPropertyDuplicatesExpectedResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use type annotation syntax",
    "checkerName": "UseNullableReferenceTypesAnnotationSyntax",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible overflow in checked context.",
    "checkerName": "IntVariableOverflowInCheckedContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class can be made sealed (non-inheritable) (private accessibility)",
    "checkerName": "ClassCanBeSealed.Local",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function is recursive on all execution paths",
    "checkerName": "FunctionRecursiveOnAllPaths",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (line break is missing elsewhere)",
    "checkerName": "MissingLinebreak",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Event is never subscribed to (non-private accessibility)",
    "checkerName": "EventNeverSubscribedTo.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function return value is never used",
    "checkerName": "UnusedLocalFunctionReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Usage of tabulation character for indentation is prohibited",
    "checkerName": "TabsAreDisallowed",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent synchronization on field",
    "checkerName": "InconsistentlySynchronizedField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused parameter (non-private accessibility)",
    "checkerName": "UnusedParameter.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Struct can be made readonly",
    "checkerName": "StructCanBeMadeReadOnly",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-nullable member is not initialized at constructor exit",
    "checkerName": "NotNullMemberIsNotInitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert delegate variable to local function",
    "checkerName": "ConvertToLocalFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing '.ConfigureAwait(false)' in library code",
    "checkerName": "UseConfigureAwaitFalse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is never accessed via base type (private accessibility)",
    "checkerName": "UnusedMemberInSuper.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter can be declared with base type",
    "checkerName": "SuggestBaseTypeForParameter",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is only used in overrides (non-private accessibility)",
    "checkerName": "UnusedMemberHierarchy.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Equality comparison of floating point numbers",
    "checkerName": "CompareOfFloatsByEqualityOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
    "checkerName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().FirstOrDefault()",
    "checkerName": "ReplaceWithOfType.FirstOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().FirstOrDefault() (replace with OfType<T>().FirstOrDefault(..))",
    "checkerName": "ReplaceWithOfType.FirstOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant lambda expression parameter type specification",
    "checkerName": "RedundantLambdaParameterType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'if' statement to 'switch' expression",
    "checkerName": "ConvertIfStatementToSwitchExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Loop control variable is never changed inside loop",
    "checkerName": "LoopVariableIsNeverChangedInsideLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Overridden GetHashCode calls base 'Object.GetHashCode()'",
    "checkerName": "BaseObjectGetHashCodeCallInGetHashCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type.",
    "checkerName": "RedundantNotNullConstraint",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "BaseTypeRequired attribute supports only classes and interfaces",
    "checkerName": "UnsupportedRequiredBaseType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Constant shift expression with non-zero operands results in zero value.",
    "checkerName": "ShiftExpressionResultEqualsZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Part of the code cannot be parsed",
    "checkerName": "NonParsableElement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (tabs/spaces mismatch)",
    "checkerName": "TabsAndSpacesMismatch",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member initialized value ignored",
    "checkerName": "MemberInitializerValueIgnored",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Namespace does not correspond to file location",
    "checkerName": "CheckNamespace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to Any(..)",
    "checkerName": "ReplaceWithSingleCallToAny",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace auto-property with computed property",
    "checkerName": "ReplaceAutoPropertyWithComputedProperty",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style of default value expression when type is evident",
    "checkerName": "ArrangeDefaultValueWhenTypeEvident",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'lock' statement)",
    "checkerName": "EnforceLockStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Keyword 'new' is redundant",
    "checkerName": "CSharpWarnings::CS0109",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert property to auto-property",
    "checkerName": "ConvertToAutoProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Incompatible argument type or incorrect argument value",
    "checkerName": "NUnit.IncorrectArgumentType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused local variable",
    "checkerName": "UnusedVariable.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'Array.Empty<T>()'",
    "checkerName": "UseArrayEmptyMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'as' expression type check and the following null check into pattern matching",
    "checkerName": "UsePatternMatching",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty general catch clause",
    "checkerName": "EmptyGeneralCatchClause",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'",
    "checkerName": "CSharpWarnings::CS8073",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible multiple enumeration",
    "checkerName": "PossibleMultipleEnumeration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Auto-property can be made get-only (non-private accessibility)",
    "checkerName": "AutoPropertyCanBeMadeGetOnly.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant discard designation",
    "checkerName": "RedundantDiscardDesignation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Async test method must return Task or Task<T>",
    "checkerName": "NUnit.AsyncMethodMustBeTask",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible ambiguity while accessing member by interface",
    "checkerName": "PossibleInterfaceMemberAmbiguity",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method has async overload with cancellation support",
    "checkerName": "MethodHasAsyncOverloadWithCancellation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Pass string interpolation expression",
    "checkerName": "PassStringInterpolation",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function is never used",
    "checkerName": "UnusedLocalFunction.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Array creation can be replaced with array initializer",
    "checkerName": "RedundantArrayCreationExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'if-return' statement can be re-written as 'return' statement",
    "checkerName": "ConvertIfStatementToReturnStatement",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The tuple element name is ignored because a different name or no name is specified by the target type.",
    "checkerName": "CSharpWarnings::CS8123",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (multiple statements on one line)",
    "checkerName": "MultipleStatementsOnOneLine",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'nameof' expression to reference type's name",
    "checkerName": "UseNameOfInsteadOfTypeOf",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible mistaken empty statement",
    "checkerName": "CSharpWarnings::CS0642",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (remove redundant braces)",
    "checkerName": "RemoveRedundantBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent Naming",
    "checkerName": "InconsistentNaming",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Immediate delegate invocation",
    "checkerName": "RedundantImmediateDelegateInvocation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Add/remove qualifier for static members",
    "checkerName": "ArrangeStaticMemberQualifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use explicit or implicit modifier definition for type members",
    "checkerName": "ArrangeTypeMemberModifiers",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values",
    "checkerName": "CSharpWarnings::CS1981",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Introduce optional parameters (private accessibility)",
    "checkerName": "IntroduceOptionalParameters.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit.AutoFixture. Redundant argument in InlineAutoData attribute",
    "checkerName": "NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'using' statement)",
    "checkerName": "EnforceUsingStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class overrides Object.Equals(object o) but not Object.GetHashCode()",
    "checkerName": "CSharpWarnings::CS0659",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant fixed pointer declaration",
    "checkerName": "RedundantFixedPointerDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
    "checkerName": "StringLastIndexOfIsCultureSpecific.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
    "checkerName": "StringLastIndexOfIsCultureSpecific.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown Razor layout",
    "checkerName": "Razor.LayoutNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type check for nullable type is equal to underlying type check",
    "checkerName": "RedundantNullableTypeMark",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)",
    "checkerName": "StringLastIndexOfIsCultureSpecific.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparison to integral constant is useless; the constant is outside the range of type 'type'.",
    "checkerName": "CSharpWarnings::CS0652",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored",
    "checkerName": "CSharpWarnings::CS0657",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored",
    "checkerName": "CSharpWarnings::CS0658",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Values in range do not fit the type of the test parameter",
    "checkerName": "NUnit.RangeAttributeBoundsAreOutOfRange",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert to 'using' declaration",
    "checkerName": "ConvertToUsingDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Char is possibly unintentionally used as integer",
    "checkerName": "ConfusingCharAsIntegerInConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)",
    "checkerName": "BadIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "IQueryable is possibly unintentionally used as IEnumerable",
    "checkerName": "PossibleUnintendedQueryableAsEnumerable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator.",
    "checkerName": "CSharpWarnings::CS8383",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Redundant expected result for void test method",
    "checkerName": "NUnit.RedundantExpectedResultInTestCaseAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit array creation in argument of 'params' parameter",
    "checkerName": "RedundantExplicitParamsArrayCreation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment in conditional expression",
    "checkerName": "CSharpWarnings::CS0665",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Reference to a volatile field will not be treated as volatile",
    "checkerName": "CSharpWarnings::CS0420",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Similar anonymous type detected nearby",
    "checkerName": "SimilarAnonymousTypeNearby",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Async function without await expression",
    "checkerName": "CSharpWarnings::CS1998",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use index from end expression",
    "checkerName": "UseIndexFromEndExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member overrides obsolete member",
    "checkerName": "CSharpWarnings::CS0672",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().LastOrDefault() (replace with OfType<T>().LastOrDefault(..))",
    "checkerName": "ReplaceWithOfType.LastOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().LastOrDefault()",
    "checkerName": "ReplaceWithOfType.LastOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use null check instead of a type check succeeding on any not-null value.",
    "checkerName": "ConvertTypeCheckToNullCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed local variable",
    "checkerName": "NotAccessedVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter output value is always discarded (private accessibility)",
    "checkerName": "OutParameterValueIsAlwaysDiscarded.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Ignored parameter attribute",
    "checkerName": "NUnit.IgnoredParameterAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'DefaultParameterValueAttribute' should be used in conjunction with 'OptionalAttribute'",
    "checkerName": "MeaninglessDefaultParameterValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty control statement body",
    "checkerName": "EmptyEmbeddedStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Bitwise-or operator used on a sign-extended operand.",
    "checkerName": "CSharpWarnings::CS0675",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty switch block",
    "checkerName": "CSharpWarnings::CS1522",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Operator 'is'/'Type Of ... Is ...' can be used",
    "checkerName": "OperatorIsCanBeUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method supports cancellation",
    "checkerName": "MethodSupportsCancellation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'params' modifier is always ignored on overrides",
    "checkerName": "RedundantParams",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-readonly type member referenced in 'GetHashCode()'",
    "checkerName": "NonReadonlyMemberInGetHashCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter output value is always discarded (non-private accessibility)",
    "checkerName": "OutParameterValueIsAlwaysDiscarded.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge conditional ?: expression into conditional access (when possible)",
    "checkerName": "MergeConditionalExpressionWhenPossible",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Test case source must be field, property, or method",
    "checkerName": "NUnit.TestCaseSourceMustBeFieldPropertyMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred body style (convert to method or operator with preferred body style)",
    "checkerName": "ArrangeMethodOrOperatorBody",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant method overload (non-private accessibility)",
    "checkerName": "RedundantOverload.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Part of loop's body can be converted into LINQ-expression",
    "checkerName": "LoopCanBePartlyConvertedToQuery",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Exception rethrow possibly intended",
    "checkerName": "PossibleIntendedRethrow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Anonymous method signature is not necessary",
    "checkerName": "UnusedAnonymousMethodSignature",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around child statement)",
    "checkerName": "BadChildStatementIndent",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of obsolete symbol",
    "checkerName": "CSharpWarnings::CS0618",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "For-loop can be converted into foreach-loop",
    "checkerName": "ForCanBeConvertedToForeach",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Useless arithmetical operation.",
    "checkerName": "UselessBinaryOperation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of obsolete symbol (without message)",
    "checkerName": "CSharpWarnings::CS0612",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'with' expression modifies all accessible instance members",
    "checkerName": "WithExpressionModifiesAllMembers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred argument style for named expressions",
    "checkerName": "ArgumentsStyleNamedExpression",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment made to same variable",
    "checkerName": "CSharpWarnings::CS1717",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaring new protected member in sealed class is the same as declaring it as private",
    "checkerName": "CSharpWarnings::CS0628",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant method overload (private accessibility)",
    "checkerName": "RedundantOverload.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line should be indented or outdented elsewhere)",
    "checkerName": "MissingIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Multiple override candidates at run-time",
    "checkerName": "CSharpWarnings::CS1957",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression is always 'null'",
    "checkerName": "ExpressionIsAlwaysNull",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'??' condition is never null according to nullable reference types' annotations",
    "checkerName": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join or separate attributes is section",
    "checkerName": "ArrangeAttributes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use explicit or implicit modifier definition for types",
    "checkerName": "ArrangeTypeModifiers",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function hides method",
    "checkerName": "LocalFunctionHidesMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate typeparam tag in XML comment",
    "checkerName": "CSharpWarnings::CS1710",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant semicolon after type or namespace declaration",
    "checkerName": "RedundantDeclarationSemicolon",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name",
    "checkerName": "CSharpWarnings::CS1711",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type parameter has no matching typeparam tag in the XML comment",
    "checkerName": "CSharpWarnings::CS1712",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made protected (private accessibility)",
    "checkerName": "MemberCanBeProtected.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single assignment",
    "checkerName": "ReplaceWithSingleAssignment.False",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Thrown value may be null.",
    "checkerName": "CSharpWarnings::CS8597",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter can be declared with base type",
    "checkerName": "SuggestBaseTypeForParameterInConstructor",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Static type in 'is' or 'as' operator.",
    "checkerName": "CSharpWarnings::CS7023",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return type of a function can be non-nullable",
    "checkerName": "ReturnTypeCanBeNotNullable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability attribute used with declaration that cannot be directly referenced from other code",
    "checkerName": "NotObservableAnnotationRedundancy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullable warning suppression operator might be confused with inverted 'is' expression",
    "checkerName": "SuppressNullableWarningExpressionAsInvertedIsExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable in local function hides variable from outer scope",
    "checkerName": "VariableHidesOuterVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Typo in comment",
    "checkerName": "CommentTypo",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS",
      "C_CPP",
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found.",
    "checkerName": "CSharpWarnings::CS7022",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around preprocessor directive)",
    "checkerName": "BadPreprocessorIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Field can be made readonly (private accessibility)",
    "checkerName": "FieldCanBeMadeReadOnly.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use <inheritdoc /> on root level to inherit documentation from base candidate.",
    "checkerName": "InheritdocConsiderUsage",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused parameter in partial method",
    "checkerName": "UnusedParameterInPartialMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown Razor section",
    "checkerName": "Razor.SectionNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred body style (convert to constructor or destructor with preferred body style)",
    "checkerName": "ArrangeConstructorOrDestructorBody",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "XML comment has cref attribute that refers to a type parameter",
    "checkerName": "CSharpWarnings::CS1723",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8766",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value.",
    "checkerName": "CSharpWarnings::CS8524",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Typo in string literal",
    "checkerName": "StringLiteralTypo",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS",
      "TYPESCRIPT",
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8765",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious parameter name in ArgumentNullException",
    "checkerName": "SuspiciousParameterNameInArgumentNullException",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8768",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant control flow jump statement",
    "checkerName": "RedundantJumpStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8767",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant class or interface specification in base types list",
    "checkerName": "RedundantExtendsListEntry",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace built-in type reference with a CLR type name or a keyword",
    "checkerName": "BuiltInTypeReferenceStyle",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter must conditionally have a non-null value when exiting a function.",
    "checkerName": "CSharpWarnings::CS8762",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return value of pure method is not used",
    "checkerName": "ReturnValueOfPureMethodIsNotUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8764",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert to lambda expression",
    "checkerName": "ConvertToLambdaExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A method marked [DoesNotReturn] should not return.",
    "checkerName": "CSharpWarnings::CS8763",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty statement is redundant",
    "checkerName": "EmptyStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed positional property (private accessibility)",
    "checkerName": "NotAccessedPositionalProperty.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Get-only auto-property is never assigned",
    "checkerName": "UnassignedGetOnlyAutoProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Struct member can be made readonly",
    "checkerName": "StructMemberCanBeMadeReadOnly",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access to disposed captured variable",
    "checkerName": "AccessToDisposedClosure",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant base constructor call",
    "checkerName": "RedundantBaseConstructorCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8769",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter must have a non-null value when exiting.",
    "checkerName": "CSharpWarnings::CS8777",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'null' assignment to non-nullable entity",
    "checkerName": "AssignNullToNotNullAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member cannot be used in this attribute.",
    "checkerName": "CSharpWarnings::CS8776",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter hides member",
    "checkerName": "ParameterHidesMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member must conditionally have a non-null value when exiting a function.",
    "checkerName": "CSharpWarnings::CS8775",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member must have a non-null value when exiting.",
    "checkerName": "CSharpWarnings::CS8774",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member.",
    "checkerName": "CSharpWarnings::CS8770",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'orderby' clause 'ascending' keyword",
    "checkerName": "RedundantQueryOrderByAscendingKeyword",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Introduce optional parameters (non-private accessibility)",
    "checkerName": "IntroduceOptionalParameters.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Conditional expression can be rewritten as null-coalescing",
    "checkerName": "ReplaceConditionalExpressionWithNullCoalescing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Double negation operator",
    "checkerName": "DoubleNegationOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unassigned readonly field",
    "checkerName": "UnassignedReadonlyField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred argument style for anonymous functions",
    "checkerName": "ArgumentsStyleAnonymousFunction",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Collection's content is never queried (non-private accessibility)",
    "checkerName": "CollectionNeverQueried.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'else' keyword",
    "checkerName": "RedundantIfElseBlock",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Base member has 'params' parameter, but overrider hasn't",
    "checkerName": "BaseMemberHasParams",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Annotation conflict in hierarchy",
    "checkerName": "AnnotationConflictInHierarchy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to Single(..)",
    "checkerName": "ReplaceWithSingleCallToSingle",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around empty braces)",
    "checkerName": "BadEmptyBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Make constructor in abstract class protected",
    "checkerName": "PublicConstructorInAbstractClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant condition check before assignments",
    "checkerName": "RedundantCheckBeforeAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method invocation is skipped",
    "checkerName": "InvocationIsSkipped",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code",
    "checkerName": "CSharpWarnings::CS1911",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant range bound",
    "checkerName": "RedundantRangeBound",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Given expression always matches the provided pattern",
    "checkerName": "CSharpWarnings::CS8794",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove redundant statement",
    "checkerName": "RemoveRedundantOrStatement.False",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.ArgumentOutOfRangeException'. Start index should be less than or equal to end index",
    "checkerName": "IndexingByInvalidRange",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove redundant parentheses",
    "checkerName": "ArrangeRedundantParentheses",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with LastOrDefault($args$)",
    "checkerName": "ReplaceWithLastOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method Any()",
    "checkerName": "UseMethodAny.0",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with LastOrDefault($args$)",
    "checkerName": "ReplaceWithLastOrDefault.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method Any()",
    "checkerName": "UseMethodAny.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.InvalidCastException' in foreach loop",
    "checkerName": "PossibleInvalidCastExceptionInForeachLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Right operand of dynamic shift operation should be convertible to 'int'",
    "checkerName": "DynamicShiftRightOpIsNotInt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with LastOrDefault($args$)",
    "checkerName": "ReplaceWithLastOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation",
    "checkerName": "PossiblyImpureMethodCallOnReadonlyVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with LastOrDefault($args$)",
    "checkerName": "ReplaceWithLastOrDefault.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return type can be IEnumerable<T> (non-private accessibility)",
    "checkerName": "ReturnTypeCanBeEnumerable.Global",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Keyword 'new' is required",
    "checkerName": "CSharpWarnings::CS0108,CS0114",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'as' expression type check and the following null check into negated pattern matching",
    "checkerName": "UseNegatedPatternMatching",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method Any()",
    "checkerName": "UseMethodAny.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'object.ToString()' call for value types",
    "checkerName": "RedundantToStringCallForValueType",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method Any()",
    "checkerName": "UseMethodAny.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'case' label before default section",
    "checkerName": "RedundantEnumCaseLabelForDefaultSection",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method Any()",
    "checkerName": "UseMethodAny.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().First()",
    "checkerName": "ReplaceWithOfType.First.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.6",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().First() (replace with OfType<T>().First(..))",
    "checkerName": "ReplaceWithOfType.First.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name.",
    "checkerName": "CSharpWarnings::CS8963",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
    "checkerName": "CSharpWarnings::CS8966",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.5",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential.",
    "checkerName": "CSharpWarnings::CS8965",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute",
    "checkerName": "CSharpWarnings::CS8960",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute",
    "checkerName": "CSharpWarnings::CS8962",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String formatting method problems",
    "checkerName": "FormatStringProblem",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute",
    "checkerName": "CSharpWarnings::CS8961",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Any() (replace with OfType<T>().Any(..))",
    "checkerName": "ReplaceWithOfType.Any.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Any()",
    "checkerName": "ReplaceWithOfType.Any.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)",
    "checkerName": "StringCompareIsCultureSpecific.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit.AutoFixture. Incompatible argument type or incorrect argument value",
    "checkerName": "NUnit.AutoFixture.IncorrectArgumentType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.InvalidOperationException'",
    "checkerName": "PossibleInvalidOperationException",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Check for reference equality instead",
    "checkerName": "CheckForReferenceEqualityInstead.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Check for reference equality instead",
    "checkerName": "CheckForReferenceEqualityInstead.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Check for reference equality instead",
    "checkerName": "CheckForReferenceEqualityInstead.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant verbatim string prefix",
    "checkerName": "RedundantVerbatimStringPrefix",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. No values provided in the attributes",
    "checkerName": "NUnit.NoValuesProvided",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Check for reference equality instead",
    "checkerName": "CheckForReferenceEqualityInstead.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join or separate 'var' in deconstruction declarations",
    "checkerName": "ArrangeVarKeywordsInDeconstructingDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site.",
    "checkerName": "CSharpWarnings::CS8971",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'var' style (for built-in types)",
    "checkerName": "SuggestVarOrType_BuiltInTypes",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use object or collection initializer when possible",
    "checkerName": "UseObjectOrCollectionInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The given expression of 'is' operator is always of the provided type",
    "checkerName": "IsExpressionAlwaysTrue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made private (non-private accessibility)",
    "checkerName": "MemberCanBePrivate.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'nameof' expression to reference name",
    "checkerName": "UseNameofExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Multiple nullable attributes usage",
    "checkerName": "MultipleNullableAttributesUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant boolean comparison",
    "checkerName": "RedundantBoolCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use collection's count property",
    "checkerName": "UseCollectionCountProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access to modified captured variable",
    "checkerName": "AccessToModifiedClosure",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'string.Format()' call",
    "checkerName": "RedundantStringFormatCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lambda expression/anonymous method must be 'static' to avoid allocations",
    "checkerName": "LambdaExpressionMustBeStatic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is never used (private accessibility)",
    "checkerName": "UnusedMember.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert lambda expression to method group",
    "checkerName": "ConvertClosureToMethodGroup",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly unintended linear search in set",
    "checkerName": "PossibleUnintendedLinearSearchInSet",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'foreach' statement)",
    "checkerName": "EnforceForeachStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'Enumerable.Sum' invocation in explicit unchecked context",
    "checkerName": "EnumerableSumInExplicitUncheckedContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent arguments passed to 'Math.Clamp()' method.",
    "checkerName": "MathClampMinGreaterThanMax",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value",
    "checkerName": "DefaultValueAttributeForOptionalParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around expression braces)",
    "checkerName": "BadExpressionBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The switch expression does not handle all possible inputs (it is not exhaustive).",
    "checkerName": "CSharpWarnings::CS8509",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around declaration braces)",
    "checkerName": "BadDeclarationBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge negated null/pattern checks into complex pattern",
    "checkerName": "MergeIntoNegatedPattern",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Auto-property accessor is never used (non-private accessibility)",
    "checkerName": "UnusedAutoPropertyAccessor.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable hides member",
    "checkerName": "LocalVariableHidesMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'case' label",
    "checkerName": "RedundantCaseLabel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to First(..)",
    "checkerName": "ReplaceWithSingleCallToFirst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.NullReferenceException'",
    "checkerName": "PossibleNullReferenceException",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class is never instantiated (non-private accessibility)",
    "checkerName": "ClassNeverInstantiated.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration nullability inferred (type member is inferred to be nullable)",
    "checkerName": "AnnotateCanBeNullTypeMember",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function can be made static",
    "checkerName": "LocalFunctionCanBeMadeStatic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "One way operations must not return values",
    "checkerName": "OneWayOperationContractWithReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unassigned field (non-private accessibility)",
    "checkerName": "UnassignedField.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'ArgumentNullException.ThrowIfNull'",
    "checkerName": "UseThrowIfNullMethod",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant string interpolation",
    "checkerName": "RedundantStringInterpolation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Sealed member in sealed class",
    "checkerName": "SealedMemberInSealedClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'if' statement can be re-written as '??' expression",
    "checkerName": "ConvertIfStatementToNullCoalescingExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert property to auto-property (when possible)",
    "checkerName": "ConvertToAutoPropertyWhenPossible",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'nameof' expression to reference name in part of the string literal",
    "checkerName": "UseNameofExpressionForPartOfTheString",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use format specifier in interpolated strings",
    "checkerName": "SimplifyStringInterpolation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().SingleOrDefault() (replace with OfType<T>().SingleOrDefault(..))",
    "checkerName": "ReplaceWithOfType.SingleOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().SingleOrDefault()",
    "checkerName": "ReplaceWithOfType.SingleOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'",
    "checkerName": "CannotApplyEqualityOperatorToType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parentheses are redundant if attribute has no arguments",
    "checkerName": "RedundantAttributeParentheses",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (blank lines are redundant elsewhere)",
    "checkerName": "RedundantBlankLines",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Move variable declaration inside loop condition",
    "checkerName": "MoveVariableDeclarationInsideLoopCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style for trailing comma when the last element is not followed by a new line",
    "checkerName": "ArrangeTrailingCommaInSinglelineLists",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify conditional ternary expression",
    "checkerName": "SimplifyConditionalTernaryExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'Object.ReferenceEquals' is always false because it is called with value type",
    "checkerName": "ReferenceEqualsWithValueType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter name differs in partial method declaration",
    "checkerName": "PartialMethodParameterNameMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style of default value expression when type is not evident",
    "checkerName": "ArrangeDefaultValueWhenTypeNotEvident",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around attributes)",
    "checkerName": "BadAttributeBracketsSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (between keyword and parenthesis)",
    "checkerName": "BadSpacesAfterKeyword",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing XML comment for private or internal type or member",
    "checkerName": "InternalOrPrivateMemberNotDocumented",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in return type doesn't match partial method declaration.",
    "checkerName": "CSharpWarnings::CS8819",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The given expression of 'is' operator is never of the provided type",
    "checkerName": "IsExpressionAlwaysFalse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Event is never subscribed to (private accessibility)",
    "checkerName": "EventNeverSubscribedTo.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant member initializer",
    "checkerName": "RedundantDefaultMemberInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred argument style",
    "checkerName": "ArgumentsStyleOther",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify negated relational pattern",
    "checkerName": "NegationOfRelationalPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "try-catch and try-finally statements can be merged",
    "checkerName": "TryStatementsCanBeMerged",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify LINQ expression (use 'All')",
    "checkerName": "SimplifyLinqExpressionUseAll",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'value' parameter is not used",
    "checkerName": "ValueParameterNotUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call",
    "checkerName": "RedundantEnumerableCastCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Structured message template problems",
    "checkerName": "StructuredMessageTemplateProblem",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
    "checkerName": "CSharpWarnings::CS8825",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused label",
    "checkerName": "UnusedLabel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
    "checkerName": "CSharpWarnings::CS8824",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with FirstOrDefault($args$)",
    "checkerName": "ReplaceWithFirstOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Bitwise operation on enum which is not marked by [Flags] attribute",
    "checkerName": "BitwiseOperatorOnEnumWithoutFlags",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused local variable",
    "checkerName": "UnusedVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with FirstOrDefault($args$)",
    "checkerName": "ReplaceWithFirstOrDefault.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with FirstOrDefault($args$)",
    "checkerName": "ReplaceWithFirstOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant argument with default value",
    "checkerName": "RedundantArgumentDefaultValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Entity is only used to capture its name (non-private accessibility)",
    "checkerName": "EntityNameCapturedOnly.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with FirstOrDefault($args$)",
    "checkerName": "ReplaceWithFirstOrDefault.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The source expression always matches the provided pattern",
    "checkerName": "PatternAlwaysMatches",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around parenthesis)",
    "checkerName": "BadParensSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nested string interpolation can be inlined",
    "checkerName": "NestedStringInterpolation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use compound assignment",
    "checkerName": "ConvertToNullCoalescingCompoundAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use string interpolation expression",
    "checkerName": "UseStringInterpolation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field",
    "checkerName": "ReadAccessInDoubleCheckLocking",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant type arguments of method",
    "checkerName": "RedundantTypeArgumentsOfMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly missing comma before indexer initializer",
    "checkerName": "PossiblyMissingIndexerInitializerComma",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable has too wide declaration scope",
    "checkerName": "TooWideLocalVariableScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (multiple spaces are prohibited)",
    "checkerName": "MultipleSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (multiple type members on one line)",
    "checkerName": "MultipleTypeMembersOnOneLine",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. The maximum range value is not reachable with the step value",
    "checkerName": "NUnit.RangeToValueIsNotReachable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace ternary expression with 'switch' expression",
    "checkerName": "ConvertConditionalTernaryExpressionToSwitchExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
    "checkerName": "BuiltInTypeReferenceStyleForMemberAccess",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Math.Sign() method always gives the same result",
    "checkerName": "SuspiciousMathSignMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'if' statement to 'switch' statement",
    "checkerName": "ConvertIfStatementToSwitchStatement",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Specify string comparison explicitly",
    "checkerName": "SpecifyStringComparison",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant verbatim prefix",
    "checkerName": "RedundantVerbatimPrefix",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around braces)",
    "checkerName": "BadBracesSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type.",
    "checkerName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty switch section",
    "checkerName": "RedundantEmptySwitchSection",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer",
    "checkerName": "NegativeIndex",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace 'Slice' with range indexer",
    "checkerName": "ReplaceSliceWithRangeIndexer",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Values for test method parameters are not provided",
    "checkerName": "NUnit.MethodWithParametersAndTestAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around generic brackets)",
    "checkerName": "BadGenericBracketsSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant property pattern clause",
    "checkerName": "RedundantPropertyPatternClause",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'while' statement)",
    "checkerName": "EnforceWhileStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Namespace should be default namespace of this project",
    "checkerName": "CSharpWarnings::WME006",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant member override",
    "checkerName": "RedundantOverriddenMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve symbol in text argument",
    "checkerName": "NotResolvedInText",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type check and casts can be merged",
    "checkerName": "MergeCastWithTypeCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible overflow.",
    "checkerName": "IntVariableOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around parenthesis)",
    "checkerName": "BadParensLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious locking over synchronization primitive",
    "checkerName": "SuspiciousLockOverSynchronizationPrimitive",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Where() (replace with OfType<T>().Where(..))",
    "checkerName": "ReplaceWithOfType.Where",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment in conditional expression",
    "checkerName": "AssignmentInConditionalExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused type parameter",
    "checkerName": "UnusedTypeParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant nullable attribute.",
    "checkerName": "RedundantNullableFlowAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Interfaces marked as ServiceContract should declare at least one OperationContract",
    "checkerName": "ServiceContractWithoutOperations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around comma in lists)",
    "checkerName": "BadListLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'String.IsNullOrEmpty'",
    "checkerName": "ReplaceWithStringIsNullOrEmpty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify negative equality expression",
    "checkerName": "NegativeEqualityExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'var' style (elsewhere)",
    "checkerName": "SuggestVarOrType_Elsewhere",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'if' statement can be re-written as '?:' expression",
    "checkerName": "ConvertIfStatementToConditionalTernaryExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (space is redundant elsewhere)",
    "checkerName": "RedundantSpace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use deconstruction to swap variables",
    "checkerName": "SwapViaDeconstruction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'EventArgs.Empty'",
    "checkerName": "UseEventArgsEmptyField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve property",
    "checkerName": "PropertyNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove constructor invocation",
    "checkerName": "RemoveConstructorInvocation",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inline 'out' variable declaration",
    "checkerName": "InlineOutVariableDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Base type is required",
    "checkerName": "RequiredBaseTypesIsNotInherited",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred body style (convert to local function with preferred body style)",
    "checkerName": "ArrangeLocalFunctionBody",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible unintended reference comparison",
    "checkerName": "CSharpWarnings::CS0252,CS0253",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter is only used for precondition check (non-private accessibility)",
    "checkerName": "ParameterOnlyUsedForPreconditionCheck.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The 'l' suffix is easily confused with the digit '1'",
    "checkerName": "CSharpWarnings::CS0078",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Test case source must be static",
    "checkerName": "NUnit.TestCaseSourceMustBeStatic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Virtual member call in constructor",
    "checkerName": "VirtualMemberCallInConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify LINQ expression (use 'Any')",
    "checkerName": "SimplifyLinqExpressionUseAny",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class cannot be instantiated",
    "checkerName": "ClassCannotBeInstantiated",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style for trailing comma before new line in multiline lists",
    "checkerName": "ArrangeTrailingCommaInMultilineLists",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Captured field reference of a marshal-by-reference class may cause a runtime exception",
    "checkerName": "AddressOfMarshalByRefObject",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability attribute usage with declaration of void or value type",
    "checkerName": "AnnotationRedundancyAtValueType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert property to auto-property with private setter",
    "checkerName": "ConvertToAutoPropertyWithPrivateSetter",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit positional property declaration",
    "checkerName": "RedundantExplicitPositionalPropertyDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert to static class",
    "checkerName": "ConvertToStaticClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method is marked as OperationContract but containing type isn't marked as ServiceContract",
    "checkerName": "OperationContractWithoutServiceContract",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around square brackets within a statement)",
    "checkerName": "BadSquareBracketsSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to Last(..)",
    "checkerName": "ReplaceWithSingleCallToLast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid XML in XML comment",
    "checkerName": "CSharpWarnings::CS1570",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert to 'await using' statement or declaration",
    "checkerName": "UseAwaitUsing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'for' statement)",
    "checkerName": "EnforceForStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'record' type declaration body",
    "checkerName": "RedundantRecordBody",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter has no matching param tag in the XML comment",
    "checkerName": "CSharpWarnings::CS1573",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Ambiguous reference in XML comment",
    "checkerName": "CSharpWarnings::CS1574",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method return value is never used (non-private accessibility)",
    "checkerName": "UnusedMethodReturnValue.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate param tag in XML comment",
    "checkerName": "CSharpWarnings::CS1571",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name",
    "checkerName": "CSharpWarnings::CS1572",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lambda expression/anonymous method should not have captures of the containing context",
    "checkerName": "LambdaShouldNotCaptureContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Heuristically unreachable switch arm due to integer analysis.",
    "checkerName": "UnreachableSwitchArmDueToIntegerAnalysis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'do-while' statement)",
    "checkerName": "EnforceDoWhileStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around colon)",
    "checkerName": "BadColonSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Redundant argument instead of ExpectedResult",
    "checkerName": "NUnit.RedundantArgumentInsteadOfExpectedResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around comma)",
    "checkerName": "BadCommaSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Try cast and check for null can be replaced with a type check",
    "checkerName": "SafeCastIsUsedAsTypeCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'abstract' modifier",
    "checkerName": "RedundantAbstractModifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect signature in XML comment",
    "checkerName": "CSharpWarnings::CS1580",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Syntax error in XML comment",
    "checkerName": "CSharpWarnings::CS1584",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Property can be made init-only (non-private accessibility)",
    "checkerName": "PropertyCanBeMadeInitOnly.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
    "checkerName": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'with' expression to copy tuple",
    "checkerName": "UseWithExpressionToCopyTuple",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Ambiguous symbols in text argument",
    "checkerName": "MultipleResolveCandidatesInText",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'var' style (when type is simple)",
    "checkerName": "SuggestVarOrType_SimpleTypes",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Last()",
    "checkerName": "ReplaceWithOfType.Last.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Last() (replace with OfType<T>().Last(..))",
    "checkerName": "ReplaceWithOfType.Last.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unable to include XML fragment",
    "checkerName": "CSharpWarnings::CS1589",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "XML comment is not placed on a valid language element",
    "checkerName": "CSharpWarnings::CS1587",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Captured reference to 'volatile' field will not be treated as 'volatile'",
    "checkerName": "ByRefArgumentIsVolatileField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing XML comment for publicly visible type or member",
    "checkerName": "CSharpWarnings::CS1591",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Badly formed XML in included comments file",
    "checkerName": "CSharpWarnings::CS1592",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration nullability inferred (parameter is inferred to be not null)",
    "checkerName": "AnnotateNotNullParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid XML include element",
    "checkerName": "CSharpWarnings::CS1590",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Add/remove 'this.' qualifier",
    "checkerName": "ArrangeThisQualifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invert condition",
    "checkerName": "InvertCondition.1",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred argument style for string literal values",
    "checkerName": "ArgumentsStyleStringLiteral",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit size specification in array creation",
    "checkerName": "RedundantExplicitArraySize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function body is too complex to analyze",
    "checkerName": "FunctionComplexityOverflow",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant catch clause",
    "checkerName": "RedundantCatchClause",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use method IsInstanceOfType(..)",
    "checkerName": "UseMethodIsInstanceOfType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invocation of polymorphic field-like event",
    "checkerName": "PolymorphicFieldLikeEventInvocation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant braces in collection initializer",
    "checkerName": "RedundantCollectionInitializerElementBraces",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type is never used (non-private accessibility)",
    "checkerName": "UnusedType.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant cast",
    "checkerName": "RedundantCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment results are fully discarded",
    "checkerName": "AssignmentIsFullyDiscarded",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String literal can be inlined",
    "checkerName": "StringLiteralAsInterpolationArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent order of taken locks",
    "checkerName": "InconsistentOrderOfLocks",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred argument style for literal values",
    "checkerName": "ArgumentsStyleLiteral",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty 'with' expression is redundant",
    "checkerName": "RedundantWithExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made static (shared) (private accessibility)",
    "checkerName": "MemberCanBeMadeStatic.Local",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Auto-property can be made get-only (private accessibility)",
    "checkerName": "AutoPropertyCanBeMadeGetOnly.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around expression braces)",
    "checkerName": "BadExpressionBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use cancellation token",
    "checkerName": "UseCancellationTokenForIAsyncEnumerable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unsafe context declaration is redundant",
    "checkerName": "RedundantUnsafeContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Move to existing positional deconstruction pattern",
    "checkerName": "MoveToExistingPositionalDeconstructionPattern",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is only used in overrides (private accessibility)",
    "checkerName": "UnusedMemberHierarchy.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around member access symbols)",
    "checkerName": "BadMemberAccessSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Console output in Xunit tests",
    "checkerName": "Xunit.XunitTestWithConsoleOutput",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'if' to '||'",
    "checkerName": "ConvertIfToOrExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type parameter has the same name as a type parameter from the outer type",
    "checkerName": "CSharpWarnings::CS0693",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Count()",
    "checkerName": "ReplaceWithOfType.Count.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with simple assignment",
    "checkerName": "ReplaceWithSimpleAssignment.False",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().Count() (replace with OfType<T>().Count(..))",
    "checkerName": "ReplaceWithOfType.Count.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Virtual (overridable) member is never overridden (non-private accessibility)",
    "checkerName": "VirtualMemberNeverOverridden.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member hides static member from outer class",
    "checkerName": "MemberHidesStaticFromOuterClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class with virtual (overridable) members never inherited (private accessibility)",
    "checkerName": "ClassWithVirtualMembersNeverInherited.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to Count(..)",
    "checkerName": "ReplaceWithSingleCallToCount",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use null check pattern instead of a type check succeeding on any not-null value.",
    "checkerName": "ConvertTypeCheckPatternToNullCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Test case Result property is obsolete",
    "checkerName": "NUnit.TestCaseResultPropertyIsObsolete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Avoid using 'async' methods with the 'void' return type",
    "checkerName": "AsyncVoidMethod",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is never used (non-private accessibility)",
    "checkerName": "UnusedMember.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Filter expression is a constant, consider removing the filter",
    "checkerName": "CSharpWarnings::CS7095",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type pattern and casts can be merged",
    "checkerName": "UseSwitchCasePatternVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Container nullability attribute usage with declaration of non-container type",
    "checkerName": "ContainerAnnotationRedundancy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use positional deconstruction pattern",
    "checkerName": "UsePositionalDeconstructionPattern",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparing with null of nullable value type always produces 'false'",
    "checkerName": "CSharpWarnings::CS0464",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Introducing a 'Finalize' method can interfere with destructor invocation",
    "checkerName": "CSharpWarnings::CS0465",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (line break is redundant elsewhere)",
    "checkerName": "RedundantLinebreak",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant operand in logical conditional expression",
    "checkerName": "RedundantLogicalConditionalExpressionOperand",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter is only used for precondition check (private accessibility)",
    "checkerName": "ParameterOnlyUsedForPreconditionCheck.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'goto case' value is not implicitly convertible to required type",
    "checkerName": "CSharpWarnings::CS0469",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace 'switch' statement with 'switch' expression",
    "checkerName": "ConvertSwitchStatementToSwitchExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead",
    "checkerName": "NonAtomicCompoundOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Safe cast expression always succeeds",
    "checkerName": "TryCastAlwaysSucceeds",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Instance of IEnumerator is never disposed",
    "checkerName": "GenericEnumeratorNotDisposed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method with 'params' is invoked while more specific method is available",
    "checkerName": "PossiblyMistakenUseOfParamsMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Redundant argument in TestCase attribute",
    "checkerName": "NUnit.RedundantArgumentInTestCaseAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible 'System.InvalidCastException'",
    "checkerName": "PossibleInvalidCastException",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration nullability inferred (parameter is inferred to be nullable)",
    "checkerName": "AnnotateCanBeNullParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge sequential checks into single conditional access check (when possible)",
    "checkerName": "MergeSequentialChecksWhenPossible",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'if do while' to 'while",
    "checkerName": "ConvertIfDoToWhile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'object.ToString()' call",
    "checkerName": "RedundantToStringCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred namespace body style",
    "checkerName": "ArrangeNamespaceBody",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused positional parameter",
    "checkerName": "UnusedPositionalParameterCompiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Property can be made init-only (private accessibility)",
    "checkerName": "PropertyCanBeMadeInitOnly.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty namespace declaration",
    "checkerName": "EmptyNamespace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'Type.EmptyTypes'",
    "checkerName": "UseEmptyTypesField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'MinBy' or 'MaxBy' instead of ordering and taking 'First' or 'Last'",
    "checkerName": "SimplifyLinqExpressionUseMinByAndMaxBy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type is never used (private accessibility)",
    "checkerName": "UnusedType.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Iterator never returns",
    "checkerName": "IteratorNeverReturns",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'readonly' modifier",
    "checkerName": "RedundantReadonlyModifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (incorrect number of blank lines near braces)",
    "checkerName": "IncorrectBlankLinesNearBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'partial' modifier on method declaration",
    "checkerName": "PartialMethodWithSinglePart",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (tabs are prohibited here)",
    "checkerName": "TabsOutsideIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join local variable declaration and assignment",
    "checkerName": "JoinDeclarationAndInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Some values of the enum are not processed inside 'switch' statement",
    "checkerName": "SwitchStatementMissingSomeEnumCasesNoDefault",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove redundant pattern-matching parentheses",
    "checkerName": "RedundantPatternParentheses",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert record constructor to primary constructor",
    "checkerName": "ConvertToPrimaryConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Iteration variable can be declared with a more specific type",
    "checkerName": "MoreSpecificForeachVariableTypeAvailable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed field",
    "checkerName": "NotAccessedField.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly unintended string interpolation instead of format string template.",
    "checkerName": "PossiblyMistakenUseOfInterpolatedStringInsert",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'var' style (in deconstruction declarations)",
    "checkerName": "SuggestVarOrType_DeconstructionDeclarations",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unassigned field",
    "checkerName": "UnassignedField.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparison to integral constant is useless.",
    "checkerName": "UselessComparisonToIntegralConstant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty constructor",
    "checkerName": "EmptyConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
    "checkerName": "StringIndexOfIsCultureSpecific.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
    "checkerName": "StringIndexOfIsCultureSpecific.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use array creation expression",
    "checkerName": "UseArrayCreationExpression.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)",
    "checkerName": "StringIndexOfIsCultureSpecific.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use array creation expression",
    "checkerName": "UseArrayCreationExpression.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Static field or auto-property in generic type",
    "checkerName": "StaticMemberInGenericType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant anonymous type property explicit name",
    "checkerName": "RedundantAnonymousTypePropertyName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type.",
    "checkerName": "RedundantNullableAnnotationOnReferenceTypeConstraint",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve reference in XML comment",
    "checkerName": "CSharpWarnings::CS1574,CS1584,CS1581,CS1580",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access to a static member of a type via a derived type",
    "checkerName": "AccessToStaticMemberViaDerivedType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind.",
    "checkerName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'void' method is annotated by [MustUseReturnValue] attribute",
    "checkerName": "VoidMethodWithMustUseReturnValueAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use indexed property",
    "checkerName": "UseIndexedProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'fixed' statement)",
    "checkerName": "EnforceFixedStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.CompareTo is culture-specific",
    "checkerName": "StringCompareToIsCultureSpecific",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Event never invoked",
    "checkerName": "EventNeverInvoked",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call to 'base.Equals(...)' is reference equality",
    "checkerName": "BaseObjectEqualsIsObjectEquals",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style of 'new' expression when created type is not evident",
    "checkerName": "ArrangeObjectCreationWhenTypeNotEvident",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method with optional or 'params' parameter is hidden by overload",
    "checkerName": "MethodOverloadWithOptionalParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Specify string culture explicitly",
    "checkerName": "SpecifyACultureInStringConversionExplicitly",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Thread static field has initializer",
    "checkerName": "ThreadStaticFieldHasInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty 'for' loop is redundant",
    "checkerName": "EmptyForStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Typo in identifier",
    "checkerName": "IdentifierTypo",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP",
      "JS",
      "C_CPP",
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Incompatible expected result type or incorrect value",
    "checkerName": "NUnit.IncorrectExpectedResultType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge null/pattern checks into complex pattern",
    "checkerName": "MergeIntoPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty destructor",
    "checkerName": "EmptyDestructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Division by zero in at least one execution path.",
    "checkerName": "IntDivisionByZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Specified values are not compatible with the test parameter type",
    "checkerName": "NUnit.ParameterTypeIsNotCompatibleWithAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm",
    "checkerName": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed field (private accessibility)",
    "checkerName": "NotAccessedField.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lambda expression/anonymous method can be made 'static'",
    "checkerName": "LambdaExpressionCanBeMadeStatic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge null/pattern/value checks into 'or'/'and' patterns",
    "checkerName": "MergeIntoLogicalPattern",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)",
    "checkerName": "StringEndsWithIsCultureSpecific",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access to foreach variable in closure",
    "checkerName": "AccessToForEachVariableInClosure",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Pattern is always 'true' or always 'false'",
    "checkerName": "PatternIsAlwaysTrueOrFalse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around operator symbols)",
    "checkerName": "BadSymbolSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'string.ToCharArray()' call",
    "checkerName": "RedundantStringToCharArrayCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'class' keyword in record declaration",
    "checkerName": "RedundantRecordClassKeyword",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Module with this name does not exist",
    "checkerName": "CSharpBuildCSInvalidModuleName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible loss of fraction",
    "checkerName": "PossibleLossOfFraction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function is never used",
    "checkerName": "UnusedLocalFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with SingleOrDefault($args$)",
    "checkerName": "ReplaceWithSingleOrDefault.4",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant arithmetic overflow checking context",
    "checkerName": "RedundantOverflowCheckingContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with SingleOrDefault($args$)",
    "checkerName": "ReplaceWithSingleOrDefault.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (incorrect indent size)",
    "checkerName": "WrongIndentSize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with SingleOrDefault($args$)",
    "checkerName": "ReplaceWithSingleOrDefault.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute",
    "checkerName": "ValueRangeAttributeViolation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Abstract or virtual (overridable) event is never invoked",
    "checkerName": "EventNeverInvoked.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'true' is redundant as 'for'-statement condition",
    "checkerName": "ForStatementConditionIsTrue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious shift count for this type of left operand.",
    "checkerName": "ShiftExpressionRightOperandNotEqualRealCount",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unassigned field (private accessibility)",
    "checkerName": "UnassignedField.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant type check in a pattern",
    "checkerName": "RedundantTypeCheckInPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to SingleOrDefault(..)",
    "checkerName": "ReplaceWithSingleCallToSingleOrDefault",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Missing expected result for non-void test method",
    "checkerName": "NUnit.TestCaseAttributeRequiresExpectedResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return type can be IEnumerable<T> (private accessibility)",
    "checkerName": "ReturnTypeCanBeEnumerable.Local",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around LINQ queries)",
    "checkerName": "BadLinqLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with SingleOrDefault($args$)",
    "checkerName": "ReplaceWithSingleOrDefault.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Collection's content is never queried (private accessibility)",
    "checkerName": "CollectionNeverQueried.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred style of 'new' expression when created type is evident",
    "checkerName": "ArrangeObjectCreationWhenTypeEvident",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot access static symbol in text argument",
    "checkerName": "StaticProblemInText",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "According to values of the bit masks, expression result will always be the same.",
    "checkerName": "NonConstantEqualityExpressionHasConstantResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Formatting is specified, but interpolated string expression is not IFormattable",
    "checkerName": "InterpolatedStringExpressionIsNotIFormattable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invert 'if' statement to reduce nesting",
    "checkerName": "InvertIf",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'",
    "checkerName": "NUnit.IncorrectRangeBounds",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit tuple component name",
    "checkerName": "RedundantExplicitTupleComponentName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible mistaken call to GetType()",
    "checkerName": "PossibleMistakenCallToGetType.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible mistaken call to GetType()",
    "checkerName": "PossibleMistakenCallToGetType.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Missing arguments in TestCase attribute",
    "checkerName": "NUnit.MissingArgumentsInTestCaseAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field",
    "checkerName": "PossibleMultipleWriteAccessInDoubleCheckLocking",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Field is never used",
    "checkerName": "UnusedField.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around statement braces)",
    "checkerName": "BadControlBracesIndent",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Remove redundant statement",
    "checkerName": "RemoveRedundantOrStatement.True",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Auto-property accessor is never used (private accessibility)",
    "checkerName": "UnusedAutoPropertyAccessor.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace if statement with null-propagating code (when possible)",
    "checkerName": "UseNullPropagationWhenPossible",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible overflow in unchecked context.",
    "checkerName": "IntVariableOverflowInUncheckedContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible unassigned object created by 'new' expression",
    "checkerName": "ObjectCreationAsStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type is already listed in the interface list with different nullability of reference types.",
    "checkerName": "CSharpWarnings::CS8645",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in interface implemented by the base type doesn't match.",
    "checkerName": "CSharpWarnings::CS8644",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types.",
    "checkerName": "RedundantNullnessAttributeWithNullableReferenceTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious type conversion or check",
    "checkerName": "SuspiciousTypeConversion.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.",
    "checkerName": "CSharpWarnings::CS8643",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression is always 'true' or always 'false'",
    "checkerName": "ConditionIsAlwaysTrueOrFalse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert local variable or field to constant (non-private accessibility)",
    "checkerName": "ConvertToConstant.Global",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible cyclic constructor call",
    "checkerName": "ConstructorInitializerLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'",
    "checkerName": "CSharpWarnings::CS8656",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The switch expression does not handle some null inputs (it is not exhaustive).",
    "checkerName": "CSharpWarnings::CS8655",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The given expression never matches the provided pattern.",
    "checkerName": "CSharpWarnings::CS8416",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class is never instantiated (private accessibility)",
    "checkerName": "ClassNeverInstantiated.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class can be made sealed (non-inheritable) (non-private accessibility)",
    "checkerName": "ClassCanBeSealed.Global",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found.",
    "checkerName": "CSharpWarnings::CS8892",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unassigned readonly field",
    "checkerName": "UnassignedReadonlyField.Compiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot access symbol in text argument",
    "checkerName": "AccessRightsInText",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Duplicate values",
    "checkerName": "NUnit.DuplicateValues",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use deconstruction",
    "checkerName": "UseDeconstruction",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The given expression always matches the provided constant.",
    "checkerName": "CSharpWarnings::CS8417",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute.",
    "checkerName": "CSharpWarnings::CS8425",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Partial method declarations have inconsistent nullability for type parameter.",
    "checkerName": "CSharpWarnings::CS8667",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'.",
    "checkerName": "CSharpWarnings::CS8424",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line indent should be restored to the previous level elsewhere)",
    "checkerName": "OutdentIsOffPrevLevel",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.",
    "checkerName": "CSharpWarnings::CS8669",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use compiler-supported nullable attributes",
    "checkerName": "UseNullableAttributesSupportedByCompiler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use string interpolation expression when possible",
    "checkerName": "UseStringInterpolationWhenPossible",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge 'and' pattern",
    "checkerName": "MergeAndPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Cannot resolve symbol in TestCaseSource or ValueSource attribute",
    "checkerName": "NUnit.TestCaseSourceCannotBeResolved",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'GC.SuppressFinalize' is invoked for type without destructor",
    "checkerName": "GCSuppressFinalizeForTypeWithoutDestructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around switch statement)",
    "checkerName": "BadSwitchBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter type can be IEnumerable<T> (non-private accessibility)",
    "checkerName": "ParameterTypeCanBeEnumerable.Global",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>().LongCount()",
    "checkerName": "ReplaceWithOfType.LongCount",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method return value is never used (private accessibility)",
    "checkerName": "UnusedMethodReturnValue.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Convert 'Nullable<T>' to 'T?'",
    "checkerName": "ConvertNullableToShortForm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Problem in contract annotation definition",
    "checkerName": "ContractAnnotationNotParsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A suppressed nullable warning might hide an underlying problem.",
    "checkerName": "NullableWarningSuppressionIsUsed",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Object or collection initializer implicitly dereferences possibly null member.",
    "checkerName": "CSharpWarnings::CS8670",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'with' expression is used instead of object initializer",
    "checkerName": "WithExpressionInsteadOfInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace object pattern not performing any additional checks with 'var' pattern",
    "checkerName": "ReplaceObjectPatternWithVarPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant explicit type in array creation",
    "checkerName": "RedundantExplicitArrayCreation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit.AutoFixture. Missed Test or TestFixture attribute",
    "checkerName": "NUnit.AutoFixture.MissedTestOrTestFixtureAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'with' expression to copy struct",
    "checkerName": "UseWithExpressionToCopyStruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden",
    "checkerName": "CSharpWarnings::CS0660,CS0661",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'partial' modifier on type declaration",
    "checkerName": "PartialTypeWithSinglePart",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible null reference assignment.",
    "checkerName": "CSharpWarnings::CS8601",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Converting null literal or possible null value to non-nullable type.",
    "checkerName": "CSharpWarnings::CS8600",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible null reference return.",
    "checkerName": "CSharpWarnings::CS8603",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant argument passed to caller argument expression parameter",
    "checkerName": "RedundantCallerArgumentExpressionDefaultValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member or type can be made internal(friend)",
    "checkerName": "MemberCanBeInternal",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Dereference of a possibly null reference.",
    "checkerName": "CSharpWarnings::CS8602",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'void' method is annotated by [Pure] attribute",
    "checkerName": "PureAttributeOnVoidMethod",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'if' statement can be re-written as '??=' assignment",
    "checkerName": "ConvertIfStatementToNullCoalescingAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge conditional ?: expression into conditional access",
    "checkerName": "MergeConditionalExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Simplify negated pattern",
    "checkerName": "DoubleNegationInPattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>()",
    "checkerName": "ReplaceWithOfType.2",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>()",
    "checkerName": "ReplaceWithOfType.1",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant name qualifier",
    "checkerName": "RedundantNameQualifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with OfType<T>()",
    "checkerName": "ReplaceWithOfType.3",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NUnit. Range 'step' parameter value must be non-zero",
    "checkerName": "NUnit.RangeStepValueMustNotBeZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible unintended reference comparison",
    "checkerName": "PossibleUnintendedReferenceComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in return type doesn't match overridden member.",
    "checkerName": "CSharpWarnings::CS8609",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type doesn't match overridden member.",
    "checkerName": "CSharpWarnings::CS8608",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
    "checkerName": "CSharpWarnings::CS8847",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unboxing a possibly null value.",
    "checkerName": "CSharpWarnings::CS8605",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible null reference argument for a parameter.",
    "checkerName": "CSharpWarnings::CS8604",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
    "checkerName": "CSharpWarnings::CS8846",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].",
    "checkerName": "CSharpWarnings::CS8607",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The source expression never matches the provided pattern",
    "checkerName": "PatternNeverMatches",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type doesn't match implicitly implemented member.",
    "checkerName": "CSharpWarnings::CS8612",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type of parameter doesn't match partial method declaration.",
    "checkerName": "CSharpWarnings::CS8611",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type of parameter doesn't match implicitly implemented member.",
    "checkerName": "CSharpWarnings::CS8614",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in return type doesn't match implicitly implemented member.",
    "checkerName": "CSharpWarnings::CS8613",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use format specifier in format strings",
    "checkerName": "UseFormatSpecifierInFormatString",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Async method invocation without await expression",
    "checkerName": "CSharpWarnings::CS4014",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type of parameter doesn't match overridden member.",
    "checkerName": "CSharpWarnings::CS8610",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Record defined 'Equals' but not 'GetHashCode'",
    "checkerName": "CSharpWarnings::CS8851",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'if' statement)",
    "checkerName": "EnforceIfStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with simple assignment",
    "checkerName": "ReplaceWithSimpleAssignment.True",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (space is missing elsewhere)",
    "checkerName": "MissingSpace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Field can be made readonly (non-private accessibility)",
    "checkerName": "FieldCanBeMadeReadOnly.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
    "checkerName": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Heuristically unreachable code",
    "checkerName": "HeuristicUnreachableCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'ConfigureAwait(true)'",
    "checkerName": "RedundantConfigureAwait",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around namespace braces)",
    "checkerName": "BadNamespaceBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Field hides property with default implementation in interface",
    "checkerName": "FieldHidesInterfacePropertyWithDefaultImplementation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant suppress nullable warnings expression.",
    "checkerName": "RedundantSuppressNullableWarningExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in source type doesn't match target type.",
    "checkerName": "CSharpWarnings::CS8619",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in return type doesn't match implemented member.",
    "checkerName": "CSharpWarnings::CS8616",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type doesn't match implemented member.",
    "checkerName": "CSharpWarnings::CS8615",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-nullable member is uninitialized.",
    "checkerName": "CSharpWarnings::CS8618",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type of parameter doesn't match implemented member.",
    "checkerName": "CSharpWarnings::CS8617",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8622",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve resource item",
    "checkerName": "ResourceItemNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot convert null literal to non-nullable reference type.",
    "checkerName": "CSharpWarnings::CS8625",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types.",
    "checkerName": "CSharpWarnings::CS8624",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Usage of <inheritdoc /> is invalid.",
    "checkerName": "InheritdocInvalidUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred body style (convert to property, indexer or event with preferred body style)",
    "checkerName": "ArrangeAccessorOwnerBody",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Types and aliases should not be named 'record'",
    "checkerName": "CSharpWarnings::CS8860",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed positional property (non-private accessibility)",
    "checkerName": "NotAccessedPositionalProperty.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes).",
    "checkerName": "CSharpWarnings::CS8621",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types.",
    "checkerName": "CSharpWarnings::CS8620",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (blank lines are missing elsewhere)",
    "checkerName": "MissingBlankLines",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Virtual (overridable) member is never overridden (private accessibility)",
    "checkerName": "VirtualMemberNeverOverridden.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant always match subpattern",
    "checkerName": "RedundantAlwaysMatchSubpattern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Add parentheses to avoid non-obvious precedence",
    "checkerName": "ArrangeMissingParentheses",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter type can be IEnumerable<T> (private accessibility)",
    "checkerName": "ParameterTypeCanBeEnumerable.Local",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment is not used",
    "checkerName": "RedundantAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type member is never accessed via base type (non-private accessibility)",
    "checkerName": "UnusedMemberInSuper.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullable value type may be null.",
    "checkerName": "CSharpWarnings::CS8629",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Replace with single call to LastOrDefault(..)",
    "checkerName": "ReplaceWithSingleCallToLastOrDefault",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type argument doesn't match 'class' constraint.",
    "checkerName": "CSharpWarnings::CS8634",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability mismatch in constraints for type parameter.",
    "checkerName": "CSharpWarnings::CS8633",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Separate control transfer statement with blank line",
    "checkerName": "SeparateControlTransferStatement",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
    "checkerName": "CSharpWarnings::CS8632",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Nullability of type argument doesn't match constraint type.",
    "checkerName": "CSharpWarnings::CS8631",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member can be made private (private accessibility)",
    "checkerName": "MemberCanBePrivate.Local",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Do not store SpinLock in readonly field",
    "checkerName": "SpinLockInReadonlyField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Heuristically unreachable case due to integer analysis.",
    "checkerName": "UnreachableSwitchCaseDueToIntegerAnalysis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Explicit argument passed to parameter with caller info attribute",
    "checkerName": "ExplicitCallerInfoArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Merge sequential checks into single conditional access check",
    "checkerName": "MergeSequentialChecks",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Usage of possibly unassigned local variable",
    "checkerName": "UsageOfPossiblyUnassignedValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of coerced equality (using of coerced equality operator)",
    "checkerName": "CoercedEqualsUsing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Overwriting prototype of native object",
    "checkerName": "NativeTypePrototypeOverwriting",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Constructor call is not used or possibly used for side-effects",
    "checkerName": "ConstructorCallNotUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Illegal syntax in XML code comment",
    "checkerName": "XmlDocCommentSyntaxProblem",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter name 'arguments' clashes with pre-defined JS function-scope variable",
    "checkerName": "FunctionParameterNamedArguments",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Trailing redundant comma in object properties list may be error",
    "checkerName": "UnsafeCommaInObjectPropertiesList",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Condition is always constant",
    "checkerName": "ConditionIsAlwaysConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Not all code paths return a value",
    "checkerName": "NotAllPathsReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Statement termination doesn't match code style",
    "checkerName": "StatementTermination",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assigned value is never used",
    "checkerName": "AssignedValueIsNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'super' must be called before accessing 'this' in the constructor of a derived class.",
    "checkerName": "SuperCallProhibitsThis",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Path for reference comment not found",
    "checkerName": "JsPathNotFound",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable is used outside of scope which it is declared",
    "checkerName": "VariableUsedOutOfScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function is used before it is declared",
    "checkerName": "FunctionsUsedBeforeDeclared",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate local declaration",
    "checkerName": "DuplicatingLocalDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local function is redefined later",
    "checkerName": "LocalFunctionRedefinedLater",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of coerced equality (using of coerced equality operator with 'null' or 'undefined')",
    "checkerName": "CoercedEqualsUsingWithNullUndefined",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-parenthesized object destructuring assignment cannot be used in an expression statement",
    "checkerName": "ObjectDestructuringWithoutParentheses",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Triple-slash directives are only valid at the top of the file",
    "checkerName": "IncorrectTripleSlashLocation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comma is expected in object literal",
    "checkerName": "ObjectLiteralsAreNotCommaFree",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate parameter declaration in 'strict mode'",
    "checkerName": "DuplicatingParameterDeclarationError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of possibly unassigned property or global variable",
    "checkerName": "PossiblyUnassignedProperty",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate property declaration",
    "checkerName": "DuplicatingPropertyDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant block",
    "checkerName": "RedundantBlock",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious expression statement",
    "checkerName": "WrongExpressionStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of 'arguments.caller' and 'arguments.callee' in 'strict mode'",
    "checkerName": "CallerCalleeUsingError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ECMAScript 2016 feature usage when in ES 2015 or lower",
    "checkerName": "Es7Feature",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Join local variable declaration and assignment",
    "checkerName": "JoinDeclarationAndInitializerJs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate switch label",
    "checkerName": "DuplicatingSwitchLabel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ECMAScript 2015 feature usage when in ES 5 or lower",
    "checkerName": "Es6Feature",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable can be made constant",
    "checkerName": "VariableCanBeMadeConst",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration hides another declaration from an outer scope",
    "checkerName": "DeclarationHides",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate property declaration in 'strict mode'",
    "checkerName": "DuplicatingPropertyDeclarationError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter value is not used",
    "checkerName": "ParameterValueIsNotUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of undeclared global variable",
    "checkerName": "UndeclaredGlobalVariableUsing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String concatenation can be converted to a template string",
    "checkerName": "StringConcatenationToTemplateString",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable can be safely moved to inner block",
    "checkerName": "VariableCanBeMovedToInnerBlock",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Similar expressions comparison",
    "checkerName": "SimilarExpressionsComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of 'this' in global context",
    "checkerName": "ThisInGlobalContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invocation of non-function expression",
    "checkerName": "InvocationOfNonFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment to an implicitly declared global variable",
    "checkerName": "AssignToImplicitGlobalInFunctionScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Qualifier is 'null' or 'undefined'",
    "checkerName": "QualifiedExpressionIsNull",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Intermediate local variable is redundant because it can be replaced with a destructuring swap expression",
    "checkerName": "ReplaceWithDestructuringSwap",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of 'eval'/'arguments' name in 'strict mode'",
    "checkerName": "EvalArgumentsNameError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable is used in inner scope before it is declared",
    "checkerName": "VariableUsedInInnerScopeBeforeDeclared",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Object property declaration is expected",
    "checkerName": "EmptyObjectPropertyDeclaration",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment to a variable inside a conditional statement",
    "checkerName": "AssignmentInConditionExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'var' variable can be made 'let' variable",
    "checkerName": "VariableCanBeMadeLet",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent function returns",
    "checkerName": "InconsistentFunctionReturns",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible mistake: ambiguous lambda block and object literal",
    "checkerName": "SuspiciousLambdaBlock",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'?:' expression has identical true and false branches",
    "checkerName": "ConditionalTernaryEqualBranch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS",
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "L-value expected error",
    "checkerName": "LValueIsExpected",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invoked expression is not a function value",
    "checkerName": "InvokedExpressionMaybeNonFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of 'with' statements in 'strict mode'",
    "checkerName": "WithStatementUsingError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lexical declaration can only be declared inside a block.",
    "checkerName": "LexicalDeclarationNeedsBlock",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment of a local variable to itself is redundant",
    "checkerName": "SameVariableAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant local function name",
    "checkerName": "RedundantLocalFunctionName",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Heuristically unreachable code",
    "checkerName": "HeuristicallyUnreachableCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Subsequent indexers can be replaced by a destructuring declaration or assignment",
    "checkerName": "ReplaceIndicingWithArrayDestructuring",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression is always constant",
    "checkerName": "ExpressionIsAlwaysConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Property setter must have a single parameter",
    "checkerName": "PropertySetterMustHaveSingleParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "There is no .hasOwnProperty() check in a body of 'for in' loop. This will cause an enumeration of prototype properties",
    "checkerName": "MissingHasOwnPropertyInForeach",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Qualifier can be 'null' or 'undefined'",
    "checkerName": "QualifiedExpressionMaybeNull",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Statement is possibly incorrectly broken by a newline",
    "checkerName": "PossiblyIncorrectlyBrokenStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Misuse of 'this' qualifier in inner function",
    "checkerName": "MisuseOfOwnerFunctionThis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of future reserved word",
    "checkerName": "UsingOfReservedWord",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparison of 'typeof' expression with incorrect value",
    "checkerName": "IncorrectOperandInTypeOfComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused local variable / function / class",
    "checkerName": "UnusedLocals",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function is used outside of scope which it is declared",
    "checkerName": "FunctionUsedOutOfScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Intermediate local variable is redundant and can be safely inlined",
    "checkerName": "RedundantIntermediateVariable",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of 'arguments.caller' and 'arguments.callee'",
    "checkerName": "CallerCalleeUsing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Multiple declarations in 'for in' error",
    "checkerName": "MultipleDeclarationsInForeach",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unreachable code",
    "checkerName": "JsUnreachableCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Property getter cannot have parameters",
    "checkerName": "PropertyGetterCannotHaveParameters",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Return statement with a value in the global scope",
    "checkerName": "ReturnFromGlobalScopetWithValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Subsequent indexers in object literal fields can be simplified with destructuring",
    "checkerName": "ReplaceIndicingWithShortHandPropertiesAfterDestructuring",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve symbol",
    "checkerName": "NotResolved",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of implicitly declared global variable",
    "checkerName": "UseOfImplicitGlobalInFunctionScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Experimental feature usage when language level set to stable",
    "checkerName": "ExperimentalFeature",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comma is not valid here",
    "checkerName": "CommaNotValidHere",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-assigned constant",
    "checkerName": "NonAssignedConstant",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "JSON validation failed",
    "checkerName": "JsonValidationFailed",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assignment to constant",
    "checkerName": "AssignToConstant",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused property or function",
    "checkerName": "UnusedProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Usage of unassigned local variable",
    "checkerName": "UsageOfDefinitelyUnassignedValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused parameter of inherited member",
    "checkerName": "UnusedInheritedParameter",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-compliant quotes around string literal",
    "checkerName": "StringLiteralWrongQuotes",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Using of future reserved keywords in 'strict mode'",
    "checkerName": "UsingOfReservedWordError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A series of undefined-checks for properties can be replaced with destructuring",
    "checkerName": "ReplaceUndefinedCheckingSeriesWithObjectDestructuring",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Octal literals and escape sequences using in 'strict mode'",
    "checkerName": "OctalLiteralsNotAllowedError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused parameter",
    "checkerName": "UnusedParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Error in XML doc comment reference",
    "checkerName": "ErrorInXmlDocReference",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression is expected after 'throw' statement",
    "checkerName": "ThrowMustBeFollowedByExpression",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'else' block",
    "checkerName": "RedundantElseBlock",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A trailing element of an array is elided",
    "checkerName": "ElidedTrailingElement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid JSON syntax",
    "checkerName": "InvalidJsonSyntax",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'import' keyword is not allowed here.",
    "checkerName": "ImportKeywordNotWithInvocation",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'break' or 'continue' outside of loop body",
    "checkerName": "JumpMustBeInLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Calling 'delete' on non-qualified identifier in 'strict mode'",
    "checkerName": "DeletingNonQualifiedReference",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Extending prototype of native object",
    "checkerName": "NativeTypePrototypeExtending",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redeclaration of let/const",
    "checkerName": "BlockScopeRedeclaration",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of expression after break or continue",
    "checkerName": "LabelOrSemicolonExpected",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant local class name",
    "checkerName": "RedundantLocalClassName",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Closure on a variable modified in loop of outer scope",
    "checkerName": "ClosureOnModifiedVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable is used before it is declared",
    "checkerName": "VariableUsedBeforeDeclared",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "JS"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "CommonJs module may be converted to external module",
    "checkerName": "CommonJsExternalModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of possibly unassigned property in a static initializer",
    "checkerName": "UseOfPossiblyUnassignedProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Private class field can be made readonly",
    "checkerName": "PrivateVariableCanBeMadeReadonly",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member assigned by a function may be converted to function member",
    "checkerName": "MethodSafeThis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Constructor of an abstract class can be made protected",
    "checkerName": "AbstractClassConstructorCanBeMadeProtected",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Double negation of boolean is redundant",
    "checkerName": "DoubleNegationOfBoolean",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate reference comment is redundant",
    "checkerName": "DuplicateReferenceComment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type cast is redundant: expression is of a structurally compatible type",
    "checkerName": "RedundantTypeCastStructural",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious 'typeof' check",
    "checkerName": "SuspiciousTypeofCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of undeclared variable",
    "checkerName": "TsNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused local import",
    "checkerName": "UnusedLocalImport",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type parameter hides type parameter declared in outer scope",
    "checkerName": "TypeParameterHidesTypeParamFromOuterScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-compliant 'public' modifier or its absence",
    "checkerName": "WrongPublicModifierSpecification",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Overload is less specific than the main signature",
    "checkerName": "LessSpecificOverloadThanMainSignature",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type of variable may be specified explicitly",
    "checkerName": "SpecifyVariableTypeExplicitly",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Same item is imported twice with different names",
    "checkerName": "SameImportsWithDifferentName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Immediately-invoked function expression may be converted to internal module",
    "checkerName": "InternalModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type guard definitely produces 'never' type for the variable",
    "checkerName": "TypeGuardProducesNeverType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Introducing variable will allow to apply type guard",
    "checkerName": "IntroduceVariableToApplyGuard",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant parent type specification in extends/implements",
    "checkerName": "RedundantParentTypeDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious 'this' usage in context of local function inside class member",
    "checkerName": "SuspiciousThisUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparison of boolean with boolean value is equivalent to value or negated value",
    "checkerName": "RedundantComparisonWithBoolean",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant qualifier",
    "checkerName": "RedundantQualifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Exported entity uses a private entity",
    "checkerName": "DeclarationVisibilityError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Suspicious 'instanceof' check",
    "checkerName": "SuspiciousInstanceofCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Reference comment creates cyclic dependency",
    "checkerName": "CyclicReferenceComment",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class emulation may be converted to class",
    "checkerName": "Class",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type specification is redundant, because variable type is contextually determined from the type of assigned value",
    "checkerName": "RedundantVariableTypeSpecification",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter doesn't participate in the main signature",
    "checkerName": "ParameterDoesntMakeAnySense",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Element has implicit 'any' type",
    "checkerName": "ImplicitAnyTypeWarning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invocation of parent class may be converted to super call",
    "checkerName": "SuperCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Ternary operator may be replaced by it's condition",
    "checkerName": "TernaryCanBeReplacedByItsCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use 'as' operator instead of type assertion",
    "checkerName": "UseAsInsteadOfTypeCast",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty constructor without parameters",
    "checkerName": "RedundantEmptyConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "AMD module may be converted to external module",
    "checkerName": "AmdExternalModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function expression may be converted to lambda expression",
    "checkerName": "Lambda",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Duplicate identifier",
    "checkerName": "DuplicateIdentifierError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String literal usage allows creating specialized overload",
    "checkerName": "CreateSpecializedOverload",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve, probably symbol is located in inaccessible module",
    "checkerName": "TsResolvedFromInaccessibleModule",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Check 'amd-dependency' the same way as require() argument",
    "checkerName": "AmdDependencyPathProblem",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type cast is redundant: expression is always of provided type",
    "checkerName": "RedundantTypeCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter-property value assigned inside constructor won't be assigned to class property",
    "checkerName": "AssignedValueWontBeAssignedToCorrespondingField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possible overloads may be inferred by function body",
    "checkerName": "OverloadSignatureInferring",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-compliant path style inside 'require'",
    "checkerName": "WrongRequireRelativePath",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'Implicit any' inspection when NoImplicitAny is set",
    "checkerName": "ImplicitAnyError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type guard doesn't affect variable's type in any way",
    "checkerName": "TypeGuardDoesntAffectAnything",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Empty return value for type-annotated function",
    "checkerName": "EmptyReturnValueForTypeAnnotatedFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "More specific signature follows less specific",
    "checkerName": "MoreSpecificSignatureAfterLessSpecific",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "TYPESCRIPT"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.cplusplus.UninitializedObject clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Default initialization of a const-qualified object of a type without a user-provided default constructor",
    "checkerName": "CppDefaultInitializationWithNoUserConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-c++14-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type trait can be simplified using a template alias or a variable template",
    "checkerName": "CppUseTypeTraitAlias",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class member function hiding a non-virtual function from a base class",
    "checkerName": "CppHidingFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "BlueprintImplementableEvent function is not implemented in any blueprint",
    "checkerName": "CppUEBlueprintImplementableEventNotImplemented",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "coroutine-missing-unhandled-exception clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-msc51-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertMsc51Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "switch-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSwitchEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-dereference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullDereference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "jump-seh-finally clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticJumpSehFinally",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "max-tokens clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMaxTokens",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "range-loop-construct clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRangeLoopConstruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "module-file-config-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "source-uses-openmp clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-warning-option clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownWarningOption",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "void-ptr-dereference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVoidPtrDereference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call to a virtual function inside a constructor/destructor is resolved at compile time",
    "checkerName": "CppVirtualFunctionCallInsideCtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "compare-distinct-pointer-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-inotify-init clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecInotifyInit",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Assigned value is never used",
    "checkerName": "CppAssignedValueIsNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inline-new-delete clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInlineNewDelete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Adding cv-qualifiers to references has no effect",
    "checkerName": "CppCVQualifierCanNotBeAppliedToReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-invalid-access-moved clang-tidy check",
    "checkerName": "CppClangTidyHicppInvalidAccessMoved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-openmp-51-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-string-constructor clang-tidy check",
    "checkerName": "CppClangTidyBugproneStringConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inaccessible-base clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInaccessibleBase",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Implicit pointer to integer conversion",
    "checkerName": "CppPointerToIntegralConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-pointer-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-objc-isa-usage clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "argument-outside-range clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArgumentOutsideRange",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bitwise-conditional-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "initializer-overrides clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInitializerOverrides",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-pipe clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecPipe",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function returns by const value",
    "checkerName": "CppConstValueFunctionReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "stdlibcxx-not-found clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sizeof-pointer-div clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSizeofPointerDiv",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-unsigned-enum-zero-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-env33-c clang-tidy check",
    "checkerName": "CppClangTidyCertEnv33C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sentinel clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSentinel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-equals-default clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseEqualsDefault",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class should have a user-defined constructor because of an uninitialized data member",
    "checkerName": "CppClassNeedsConstructorBecauseOfUninitializedMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-named-parameter clang-tidy check",
    "checkerName": "CppClangTidyReadabilityNamedParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err58-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertErr58Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-safe resource acquisition",
    "checkerName": "CppNonExceptionSafeResourceAcquisition",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "self-assign clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelfAssign",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mpi-buffer-deref clang-tidy check",
    "checkerName": "CppClangTidyMpiBufferDeref",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.PlacementNew clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.StackAddressEscape clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-trivially-destructible clang-tidy check",
    "checkerName": "CppClangTidyPerformanceTriviallyDestructible",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-nonliteral clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatNonliteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-statement-expression clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuStatementExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-exists clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftExists",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable can be moved to init statement",
    "checkerName": "CppTooWideScopeInitStatement",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-accept clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecAccept",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-static data member is uninitialized",
    "checkerName": "CppUninitializedNonStaticDataMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "super-class-method-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-implicit-widening-of-multiplication-result clang-tidy check",
    "checkerName": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.ClassRelease clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-multiway-paths-covered clang-tidy check",
    "checkerName": "CppClangTidyHicppMultiwayPathsCovered",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability-completeness clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullabilityCompleteness",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-dup clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecDup",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.Move clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusMove",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-qualified-auto clang-tidy check",
    "checkerName": "CppClangTidyReadabilityQualifiedAuto",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "selector clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelector",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-maybe-repeated-use-of-weak clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-factory-float clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationFactoryFloat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "std::views::keys/values can be used",
    "checkerName": "CppUseElementsView",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-casting clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityCasting",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "string-plus-char clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStringPlusChar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Constructor of smart pointer is used instead of its make function",
    "checkerName": "CppSmartPointerVsMakeFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'static' specifier on an anonymous namespace member",
    "checkerName": "CppStaticSpecifierOnAnonymousNamespaceMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-count-overflow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftCountOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dangling-field clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDanglingField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Union member of reference type",
    "checkerName": "CppUnionMemberOfReferenceType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unneeded-member-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnneededMemberFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "availability clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAvailability",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCppCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-pragma-intrinsic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-token-paste clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidTokenPaste",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "documentation-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDocumentationPedantic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "int-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIntConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "std::size can be used",
    "checkerName": "CppUseStdSize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-extra-semi clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "explicit-ownership-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExplicitOwnershipType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-array-member-paren-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "varargs clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVarargs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-avoid-const-params-in-decls clang-tidy check",
    "checkerName": "CppClangTidyReadabilityAvoidConstParamsInDecls",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "compound-token-split clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCompoundTokenSplit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-designator clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuDesignator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nonportable-vector-initialization clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-overlap-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension",
    "checkerName": "CppMsExtDoubleUserConversionInCopyInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around declaration braces)",
    "checkerName": "CppBadDeclarationBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "No return statement in a function or a lambda returning non-void",
    "checkerName": "CppFunctionDoesntReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-conversion-cast clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationConversionCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-non-const-parameter clang-tidy check",
    "checkerName": "CppClangTidyReadabilityNonConstParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-arith clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerArith",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-oop54-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertOop54Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "max-unsigned-zero clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMaxUnsignedZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "protocol-property-synthesis-ambiguity clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-dangling-handle clang-tidy check",
    "checkerName": "CppClangTidyBugproneDanglingHandle",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-make-member-function-const clang-tidy check",
    "checkerName": "CppClangTidyReadabilityMakeMemberFunctionConst",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-replace-random-shuffle clang-tidy check",
    "checkerName": "CppClangTidyModernizeReplaceRandomShuffle",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.NewDeleteLeaks clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-attributes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownAttributes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-drectve-section clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (multiple spaces are prohibited)",
    "checkerName": "CppMultipleSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ambiguous-member-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "documentation-html clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDocumentationHtml",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing function parameter description in a documentation comment",
    "checkerName": "CppDoxygenUndocumentedParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modules-ambiguous-internal-linkage clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.API clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxAPI",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fortify-source clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFortifySource",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "suspicious-bzero clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSuspiciousBzero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around switch statement)",
    "checkerName": "CppBadSwitchBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-const-int-float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-arithmetic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullArithmetic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.FloatLoopCounter clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-sizeof-container clang-tidy check",
    "checkerName": "CppClangTidyBugproneSizeofContainer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-explicit-constructor clang-tidy check",
    "checkerName": "CppClangTidyGoogleExplicitConstructor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow-uncaptured-local clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.SmartPtrModeling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "increment-bool clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncrementBool",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-complex-integer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuComplexInteger",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "vla clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVla",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullableDereferenced clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant argument in conditional expression",
    "checkerName": "CppRedundantBooleanExpressionArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "builtin-requires-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.CallAndMessage clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreCallAndMessage",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dealloc-in-category clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeallocInCategory",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-time-subtraction clang-tidy check",
    "checkerName": "CppClangTidyAbseilTimeSubtraction",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++20-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp20Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)",
    "checkerName": "CppBadIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type-specifier missing, defaults to int",
    "checkerName": "CDeclarationWithImplicitIntType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "UnrealHeaderTool warnings",
    "checkerName": "UnrealHeaderToolWarning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "delete-incomplete clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeleteIncomplete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-analysis clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-abstract clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftAbstract",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-no-recursion clang-tidy check",
    "checkerName": "CppClangTidyMiscNoRecursion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Namespace definition containing single class specialization",
    "checkerName": "CppRedundantNamespaceDefinition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-comparison clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around expression braces)",
    "checkerName": "CppBadExpressionBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "String literal to char pointer conversion",
    "checkerName": "CppStringLiteralToCharPointerConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'const' specifier",
    "checkerName": "CppRedundantConstSpecifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-fallthrough-per-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-extra-qualification clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dynamic-class-memaccess clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++14-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "compound-token-split-by-macro clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "return-std-move clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReturnStdMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-control-flow clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantControlFlow",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable can be moved to inner scope",
    "checkerName": "CppTooWideScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Missing include guard",
    "checkerName": "CppMissingIncludeGuard",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "new-returns-null clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNewReturnsNull",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Not all control paths return a value",
    "checkerName": "CppNotAllPathsReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "free-nonheap-object clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFreeNonheapObject",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "macro-redefined clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMacroRedefined",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "retained-language-linkage clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++17-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "exit-time-destructors clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExitTimeDestructors",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err61-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertErr61Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "debug-compression-unavailable clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "keyword-macro clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticKeywordMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "encode-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEncodeType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'do-while' statement)",
    "checkerName": "CppEnforceDoStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-string-literal-operator-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Functional-style cast is used instead of a C++ cast",
    "checkerName": "CppFunctionalStyleCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-volatile-lvalue clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-str-cat-append clang-tidy check",
    "checkerName": "CppClangTidyAbseilStrCatAppend",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-use-anyofallof clang-tidy check",
    "checkerName": "CppClangTidyReadabilityUseAnyofallof",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readonly-iboutlet-property clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "For-loop can be replaced with while-loop",
    "checkerName": "CppForLoopCanBeReplacedWithWhile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-exception-baseclass clang-tidy check",
    "checkerName": "CppClangTidyHicppExceptionBaseclass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gcc-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGccCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Deprecated 'register' storage class specifier",
    "checkerName": "CppDeprecatedRegisterStorageClassSpecifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "memsize-comparison clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMemsizeComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-namespace-comment clang-tidy check",
    "checkerName": "CppClangTidyLlvmNamespaceComment",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-union-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuUnionCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "user-defined-warnings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUserDefinedWarnings",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++17-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp17Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-avoid-c-arrays clang-tidy check",
    "checkerName": "CppClangTidyHicppAvoidCArrays",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-availability-guard clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-avoid-nserror-init clang-tidy check",
    "checkerName": "CppClangTidyObjcAvoidNserrorInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-cb clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedCb",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly unused #include directive",
    "checkerName": "CppUnusedIncludeDirective",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.mktemp clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "return-type-c-linkage clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "backslash-newline-escape clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "empty-init-stmt clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEmptyInitStmt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-sizeof-expression clang-tidy check",
    "checkerName": "CppClangTidyBugproneSizeofExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-dealloc-in-category clang-tidy check",
    "checkerName": "CppClangTidyObjcDeallocInCategory",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++17-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp17Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c2x-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "builtin-memcpy-chk-size clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "darwin-avoid-spinlock clang-tidy check",
    "checkerName": "CppClangTidyDarwinAvoidSpinlock",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incrementing expression of type bool",
    "checkerName": "CppBooleanIncrementExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unguarded-availability clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnguardedAvailability",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "weak-template-vtables clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticWeakTemplateVtables",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-incorrect-roundings clang-tidy check",
    "checkerName": "CppClangTidyBugproneIncorrectRoundings",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "call-to-pure-virtual-from-ctor-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "explicit-initialize-call clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExplicitInitializeCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-default-arguments clang-tidy check",
    "checkerName": "CppClangTidyGoogleDefaultArguments",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-flexible-array-initializer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "newline-eof clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNewlineEof",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-magic-numbers clang-tidy check",
    "checkerName": "CppClangTidyReadabilityMagicNumbers",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-51-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenmp51Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around colon)",
    "checkerName": "CppBadColonSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "A function or a lambda with non-void return type should return a value",
    "checkerName": "CppReturnNoValueInNonVoidFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-internal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedInternal",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "property-attribute-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-undefined-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable is never used, but may have side-effects in its destructor",
    "checkerName": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-oop58-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertOop58Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "C-style cast is used instead of a C++ cast",
    "checkerName": "CppCStyleCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "strict-prototypes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStrictPrototypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c2x-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticC2xExtensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around expression braces)",
    "checkerName": "CppBadExpressionBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Delegate constructors with a member pointer parameter are unsupported by .NET Core",
    "checkerName": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "receiver-expr clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReceiverExpr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-isolate-declaration clang-tidy check",
    "checkerName": "CppClangTidyReadabilityIsolateDeclaration",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err09-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertErr09Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-non-copyable-objects clang-tidy check",
    "checkerName": "CppClangTidyMiscNonCopyableObjects",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-unsigned-zero-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "over-aligned clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverAligned",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Variable can be made constexpr",
    "checkerName": "CppVariableCanBeMadeConstexpr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter is never used",
    "checkerName": "CppParameterNeverUsed",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvmlibc-restrict-system-libc-headers clang-tidy check",
    "checkerName": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "underaligned-exception-object clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Abstract final class",
    "checkerName": "CppAbstractFinalClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-uniqueptr-reset-release clang-tidy check",
    "checkerName": "CppClangTidyMiscUniqueptrResetRelease",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Result of assignment is used as condition",
    "checkerName": "CppUsingResultOfAssignmentAsCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Implicit conversion to less qualified pointer type",
    "checkerName": "CppPointerConversionDropsQualifiers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "function-def-in-objc-container clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow-ivar clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadowIvar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (blank lines are redundant elsewhere)",
    "checkerName": "CppRedundantBlankLines",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "float-zero-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFloatZeroConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatPedantic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-missing-comma clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousMissingComma",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-objc-avoid-throwing-exception clang-tidy check",
    "checkerName": "CppClangTidyGoogleObjcAvoidThrowingException",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sizeof-pointer-memaccess clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Deleting a void pointer",
    "checkerName": "CppDeletingVoidPointer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "strict-selector-match clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStrictSelectorMatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-default-member-init clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseDefaultMemberInit",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inconsistent-missing-destructor-override clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullable-to-nonnull-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragmas clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmas",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-enum-usage clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousEnumUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (space is redundant elsewhere)",
    "checkerName": "CppRedundantSpace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "psabi clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPsabi",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-comment-paste clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-redundant-expression clang-tidy check",
    "checkerName": "CppClangTidyMiscRedundantExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "typename-missing clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTypenameMissing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-argument clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable might not be initialized",
    "checkerName": "CppLocalVariableMightNotBeInitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-verbose clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Throw expression can be replaced with a rethrow expression",
    "checkerName": "CppThrowExpressionCanBeReplacedWithRethrow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-nullptr clang-tidy check",
    "checkerName": "CppClangTidyHicppUseNullptr",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable can be made const",
    "checkerName": "CppLocalVariableMayBeConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ctu clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCtu",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "uninitialized-const-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUninitializedConstReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "UnrealHeaderTool errors",
    "checkerName": "UnrealHeaderToolError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-auto clang-tidy check",
    "checkerName": "CppClangTidyHicppUseAuto",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-no-internal-dependencies clang-tidy check",
    "checkerName": "CppClangTidyAbseilNoInternalDependencies",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-c++14-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-reserved-identifier clang-tidy check",
    "checkerName": "CppClangTidyBugproneReservedIdentifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++20-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undeclared-selector clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndeclaredSelector",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Backslash and newline are separated by space",
    "checkerName": "CppInvalidLineContinuation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++14-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "string-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStringCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-bool-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerBoolConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-copy-with-user-provided-copy clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Binding r-value to l-value reference is non-standard Microsoft C++ extension",
    "checkerName": "CppMsExtBindingRValueToLvalueReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "string-concatenation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStringConcatenation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-container-size-empty clang-tidy check",
    "checkerName": "CppClangTidyReadabilityContainerSizeEmpty",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly unintended incompatible reference type in range declaration",
    "checkerName": "CppRangeBasedForIncompatibleReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Too many arguments in a call to boost::format",
    "checkerName": "CppBoostFormatTooManyArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-type-limit-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-repeated-use-of-weak clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-con36-c clang-tidy check",
    "checkerName": "CppClangTidyCertCon36C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-union-member-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Precompiled header is not included",
    "checkerName": "CppPrecompiledHeaderIsNotIncluded",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-modular-include-in-module clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Result of nodiscard function is not used",
    "checkerName": "CppNoDiscardExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-build-explicit-make-pair clang-tidy check",
    "checkerName": "CppClangTidyGoogleBuildExplicitMakePair",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-ms-struct clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "vla-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVlaExtension",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-no-array-decay clang-tidy check",
    "checkerName": "CppClangTidyHicppNoArrayDecay",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.RetainCount clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-integer-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerIntegerCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.NSOrCFErrorDerefChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (incorrect number of blank lines near braces)",
    "checkerName": "CppIncorrectBlankLinesNearBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-pointer-arithmetic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullPointerArithmetic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "predefined-identifier-outside-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-assert-side-effect clang-tidy check",
    "checkerName": "CppClangTidyBugproneAssertSideEffect",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Implicit default constructor is not available",
    "checkerName": "CppImplicitDefaultConstructorNotAvailable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line should be indented or outdented elsewhere)",
    "checkerName": "CppMissingIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "concepts-ts-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConceptsTsCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-unsafe-retained-assign clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-deprecated-headers clang-tidy check",
    "checkerName": "CppClangTidyHicppDeprecatedHeaders",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Too many arguments in a call to printf",
    "checkerName": "CppPrintfExtraArg",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tentative-definition-incomplete-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.UncheckedReturn clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-else-after-return clang-tidy check",
    "checkerName": "CppClangTidyReadabilityElseAfterReturn",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl03-c clang-tidy check",
    "checkerName": "CppClangTidyCertDcl03C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragma-clang-attribute clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaClangAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-pointer-types-discards-qualifiers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Method must be public and virtual to implement a C++/CLI interface member",
    "checkerName": "CppMustBePublicVirtualToImplementInterface",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extern-initializer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExternInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c11-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticC11Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-avoid-magic-numbers clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-count-negative clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftCountNegative",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-precise clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-uppercase-literal-suffix clang-tidy check",
    "checkerName": "CppClangTidyReadabilityUppercaseLiteralSuffix",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "direct-ivar-access clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDirectIvarAccess",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "UnrealHeaderTool C++ parser errors",
    "checkerName": "UnrealHeaderToolParserError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-signal-handler clang-tidy check",
    "checkerName": "CppClangTidyBugproneSignalHandler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Binary operator acts on identical operands",
    "checkerName": "CppIdenticalOperandsInBinaryExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl54-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl54Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-character clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullCharacter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-register clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedRegister",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mismatched-new-delete clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMismatchedNewDelete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "BlueprintCallable function is never used in Blueprint or C++ code",
    "checkerName": "CppUEBlueprintCallableFunctionUnused",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-field-initializers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingFieldInitializers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class can be made final",
    "checkerName": "CppClassCanBeFinal",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "module-import-in-extern-c clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModuleImportInExternC",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "constant-logical-operand clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConstantLogicalOperand",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-volatile clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedVolatile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat-local-type-template-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-string-init clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantStringInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-pure-definition clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-inefficient-algorithm clang-tidy check",
    "checkerName": "CppClangTidyPerformanceInefficientAlgorithm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unreal Engine source file without predefined Unreal macros",
    "checkerName": "CppUESourceFileWithoutPredefinedMacros",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'inline' specifier",
    "checkerName": "CppRedundantInlineSpecifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-UProperty object member can be garbage collected at any time",
    "checkerName": "CppUE4ProbableMemoryIssuesWithUObject",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-unconventional-assign-operator clang-tidy check",
    "checkerName": "CppClangTidyMiscUnconventionalAssignOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "CFString-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCFStringLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'else' keyword inside compound statement",
    "checkerName": "CppRedundantElseKeywordInsideCompoundStatement",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-target-opt clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++14-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp14Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-constant-in-range-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-escape-sequence clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.NonnilStringConstants clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redeclaration of a template parameter from an outer scope",
    "checkerName": "CppTemplateParameterShadowing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "zero-length-array clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticZeroLengthArray",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-unqualified-friend clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "profile-instr-missing clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticProfileInstrMissing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-qualifiers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredQualifiers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around comma)",
    "checkerName": "CppBadCommaSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-member-init clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantMemberInit",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class is abstract but not explicitly declared as such",
    "checkerName": "CppAbstractClassWithoutSpecifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declarator is never used",
    "checkerName": "CppDeclaratorNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-atomic-properties clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-fold-init-type clang-tidy check",
    "checkerName": "CppClangTidyBugproneFoldInitType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-security clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatSecurity",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "requires-super-attribute clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Bad format code for boost::format",
    "checkerName": "CppBoostFormatBadCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around parenthesis)",
    "checkerName": "CppBadParensSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pessimizing-move clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPessimizingMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around child statement)",
    "checkerName": "CppBadChildStatementIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-function-pointer-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "delete-non-abstract-non-virtual-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-braces-around-statements clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityBracesAroundStatements",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-avoid-goto clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesAvoidGoto",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Private special member function is not implemented",
    "checkerName": "CppPrivateSpecialMemberFunctionIsNotImplemented",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-static-definition-in-anonymous-namespace clang-tidy check",
    "checkerName": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-inaccurate-erase clang-tidy check",
    "checkerName": "CppClangTidyBugproneInaccurateErase",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant member initializer in constructor initialization list",
    "checkerName": "CppRedundantMemberInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undef-prefix clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefPrefix",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unreal Engine version file doesn't exist",
    "checkerName": "CppUEVersionFileDoesntExist",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mismatched-return-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "idiomatic-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIdiomaticParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-inconsistent-declaration-parameter-name clang-tidy check",
    "checkerName": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "large-by-value-copy clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLargeByValueCopy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "range-loop-analysis clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "[[nodiscard]] cannot be applied to functions without a return value",
    "checkerName": "CppNodiscardFunctionWithoutReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unevaluated-expression clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnevaluatedExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-unhandled-exception-at-new clang-tidy check",
    "checkerName": "CppClangTidyBugproneUnhandledExceptionAtNew",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly erroneous empty-statement",
    "checkerName": "CppPossiblyErroneousEmptyStatements",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "analyzer-incompatible-plugin clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (between keyword and parenthesis)",
    "checkerName": "CppBadSpacesAfterKeyword",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use of an incomplete type inside a template",
    "checkerName": "CppClassIsIncomplete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dllexport-explicit-instantiation-decl clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl58-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl58Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "redundant-parens clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRedundantParens",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-undelegated-constructor clang-tidy check",
    "checkerName": "CppClangTidyBugproneUndelegatedConstructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullabilityExtension",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.cplusplus.VirtualCall clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Implicit integer to pointer conversion",
    "checkerName": "CppIntegralToPointerConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "property-access-dot-syntax clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty declaration",
    "checkerName": "CppRedundantEmptyDeclaration",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "clang-cl-pch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticClangClPch",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declarator is used only in unevaluated context",
    "checkerName": "CppEntityUsedOnlyInUnevaluatedContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "four-char-constants clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFourCharConstants",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant control flow jump statement",
    "checkerName": "CppRedundantControlFlowJump",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hip-only clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticHipOnly",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "switch-bool clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSwitchBool",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-virtual-inheritance clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaVirtualInheritance",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "webkit.UncountedLambdaCapturesChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-signed-bitwise clang-tidy check",
    "checkerName": "CppClangTidyHicppSignedBitwise",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "header-guard clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticHeaderGuard",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-con54-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertCon54Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-pp-token clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidPpToken",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-inline variable definition in a header file",
    "checkerName": "CppNonInlineVariableDefinitionInHeaderFile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-label clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedLabel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-include clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftInclude",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.cstring.CStringModeling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "import-preprocessor-directive-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-parameter clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "literal-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLiteralConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension",
    "checkerName": "CppMsExtCopyElisionInCopyInitDeclarator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.performance.Padding clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinPerformancePadding",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-objc-function-naming clang-tidy check",
    "checkerName": "CppClangTidyGoogleObjcFunctionNaming",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "block-capture-autoreleasing clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-loop-convert clang-tidy check",
    "checkerName": "CppClangTidyModernizeLoopConvert",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.uninitialized.ArraySubscript clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "constant-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConstantConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extern-c-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExternCCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (redundant whitespaces at the end of a line)",
    "checkerName": "CppUnnecessaryWhitespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check",
    "checkerName": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "address-of-packed-member clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAddressOfPackedMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-folding-constant clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuFoldingConstant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unguarded-availability-new clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-msc32-c clang-tidy check",
    "checkerName": "CppClangTidyCertMsc32C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-internal-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedInternalType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-binary-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-attributes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredAttributes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ambiguous-delete clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAmbiguousDelete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-implicit-bool-conversion clang-tidy check",
    "checkerName": "CppClangTidyReadabilityImplicitBoolConversion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "opencl-unsupported-rgba clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-equals-default clang-tidy check",
    "checkerName": "CppClangTidyHicppUseEqualsDefault",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-transparent-functors clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseTransparentFunctors",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Override function redefines a default parameter argument",
    "checkerName": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-clauses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenmpClauses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-target clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenmpTarget",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.VirtualCallModeling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "valist.Unterminated clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerValistUnterminated",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unneeded-internal-declaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-move-forwarding-reference clang-tidy check",
    "checkerName": "CppClangTidyBugproneMoveForwardingReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "valist.CopyToSelf clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerValistCopyToSelf",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dangling clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDangling",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.DivideZero clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreDivideZero",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-trailing-return clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaTrailingReturn",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-undefined-memory-manipulation clang-tidy check",
    "checkerName": "CppClangTidyBugproneUndefinedMemoryManipulation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-virtual-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonVirtualDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fixed-point-overflow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFixedPointOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-avoid-goto clang-tidy check",
    "checkerName": "CppClangTidyHicppAvoidGoto",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-objc-pointer-introspection clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "weak-vtables clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticWeakVtables",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-noreturn clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingNoreturn",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-argument-comment clang-tidy check",
    "checkerName": "CppClangTidyBugproneArgumentComment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-owning-memory clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesOwningMemory",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-special-member-functions clang-tidy check",
    "checkerName": "CppClangTidyHicppSpecialMemberFunctions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "If statement with constant condition can be replaced by 'if constexpr'",
    "checkerName": "CppIfCanBeReplacedByConstexprIf",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-noexcept clang-tidy check",
    "checkerName": "CppClangTidyHicppUseNoexcept",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "assign-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAssignEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "semicolon-before-method-body clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-compare-switch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumCompareSwitch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Entity is deprecated",
    "checkerName": "CppDeprecatedEntity",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Template arguments can be deduced",
    "checkerName": "CppRedundantExplicitTemplateArguments",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "type-safety clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTypeSafety",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-private-field clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedPrivateField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'static' specifier on a member allocation/deallocation function",
    "checkerName": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-but-set-parameter clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedButSetParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-braces-around-statements clang-tidy check",
    "checkerName": "CppClangTidyHicppBracesAroundStatements",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.ObjCGenerics clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Default case is not handled in a switch statement",
    "checkerName": "CppDefaultCaseNotHandledInSwitchStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow-field-in-constructor-modified clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unicode-whitespace clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnicodeWhitespace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check",
    "checkerName": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-sysroot clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingSysroot",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-no-escape clang-tidy check",
    "checkerName": "CppClangTidyBugproneNoEscape",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ambiguous-reversed-operator clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nonportable-system-include-path clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reserved-user-defined-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragma-pack-suspicious-include clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragma-once-outside-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-msc30-c clang-tidy check",
    "checkerName": "CppClangTidyCertMsc30C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.API clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixAPI",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "atomic-alignment clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtomicAlignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-case-range clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuCaseRange",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "atimport-in-framework-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "poison-system-directories clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.NonNullParamChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bitwise-op-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-emplace clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseEmplace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-lambda-capture clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'for' statement)",
    "checkerName": "CppEnforceForStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-raw-string-literal clang-tidy check",
    "checkerName": "CppClangTidyModernizeRawStringLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormat",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "requires-expression clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRequiresExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "wasm-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticWasmExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extra-semi clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExtraSemi",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-braces clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingBraces",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-objc-global-variable-declaration clang-tidy check",
    "checkerName": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mismatched-parameter-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "long-long clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLongLong",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member function can be made const",
    "checkerName": "CppMemberFunctionMayBeConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "used-but-marked-unused clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat-extra-semi clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-bool-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-noescape clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingNoescape",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "overloaded-shift-op-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Algorithm operating on ranges can be used",
    "checkerName": "CppUseRangeAlgorithm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around member access symbols)",
    "checkerName": "CppBadMemberAccessSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "int-to-void-pointer-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-move-const-arg clang-tidy check",
    "checkerName": "CppClangTidyHicppMoveConstArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.mkstemp clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "overloaded-virtual clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverloadedVirtual",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-unused-parameters clang-tidy check",
    "checkerName": "CppClangTidyMiscUnusedParameters",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Legacy format code for boost::format",
    "checkerName": "CppBoostFormatLegacyCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-modular-include-in-framework-module clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "static-self-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStaticSelfInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "altera-struct-pack-align clang-tidy check",
    "checkerName": "CppClangTidyAlteraStructPackAlign",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-prefer-register-over-unsigned clang-tidy check",
    "checkerName": "CppClangTidyLlvmPreferRegisterOverUnsigned",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-no-malloc clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesNoMalloc",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'auto' style (type can be replaced with auto)",
    "checkerName": "CppUseAuto",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-braces-around-statements clang-tidy check",
    "checkerName": "CppClangTidyReadabilityBracesAroundStatements",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-literal-null-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-throw-by-value-catch-by-reference clang-tidy check",
    "checkerName": "CppClangTidyMiscThrowByValueCatchByReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-equals-delete clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseEqualsDelete",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.uninitialized.Assign clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "builtin-macro-redefined clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "defaulted-function-deleted clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-socket clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecSocket",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-override clang-tidy check",
    "checkerName": "CppClangTidyHicppUseOverride",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.DynamicMemoryModeling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++2b-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp2bExtensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "memset-transposed-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-not-null-terminated-result clang-tidy check",
    "checkerName": "CppClangTidyBugproneNotNullTerminatedResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "The 'out' parameter must be assigned",
    "checkerName": "CppOutParameterMustBeWritten",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sizeof-array-div clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSizeofArrayDiv",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unreachable code",
    "checkerName": "CppUnreachableCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-undelegated-constructor clang-tidy check",
    "checkerName": "CppClangTidyHicppUndelegatedConstructor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-statically-constructed-objects clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaStaticallyConstructedObjects",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'template' keyword",
    "checkerName": "CppRedundantTemplateKeyword",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "out-of-scope-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOutOfScopeFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abstract-vbase-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAbstractVbaseInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-or-nonexistent-directory clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "module-conflict clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModuleConflict",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "self-assign-overloaded clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "config-macros clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConfigMacros",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "documentation-unknown-command clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.StackAddrEscapeBase clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "linuxkernel-must-check-errs clang-tidy check",
    "checkerName": "CppClangTidyLinuxkernelMustCheckErrs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "logical-op-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLogicalOpParentheses",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "User-defined literal suffixes must start with an underscore",
    "checkerName": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-noexcept clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseNoexcept",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-replace-auto-ptr clang-tidy check",
    "checkerName": "CppClangTidyModernizeReplaceAutoPtr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "potentially-evaluated-expression clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-fopen clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecFopen",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "BlueprintCallable function can be made static",
    "checkerName": "CppUE4BlueprintCallableFunctionMayBeStatic",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.AtSync clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-unhandled-self-assignment clang-tidy check",
    "checkerName": "CppClangTidyBugproneUnhandledSelfAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Final function in a final class",
    "checkerName": "CppFinalFunctionInFinalClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "comment clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticComment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incomplete-setjmp-declaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "spir-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSpirCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sign-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSignConversion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "typedef-redefinition clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTypedefRedefinition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-retain-self clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitRetainSelf",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "slh-asm-goto clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSlhAsmGoto",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "duplicate-method-arg clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDuplicateMethodArg",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration specifier with no declarators",
    "checkerName": "CppDeclarationSpecifierWithoutDeclarators",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-multiple-inheritance clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaMultipleInheritance",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred initialization style (order of member initializers does not match the initialization order)",
    "checkerName": "CppMemberInitializersOrder",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.SelfInit clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incomplete-framework-module-declaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Function is not implemented",
    "checkerName": "CppFunctionIsNotImplemented",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-fixed-point-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "static-inline-explicit-instantiation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability-inferred-on-nested-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-noexcept-move-constructor clang-tidy check",
    "checkerName": "CppClangTidyPerformanceNoexceptMoveConstructor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-build-namespaces clang-tidy check",
    "checkerName": "CppClangTidyGoogleBuildNamespaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-exception-escape clang-tidy check",
    "checkerName": "CppClangTidyBugproneExceptionEscape",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-include clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousInclude",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-forwarding-reference-overload clang-tidy check",
    "checkerName": "CppClangTidyBugproneForwardingReferenceOverload",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-nullptr clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseNullptr",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-zero-variadic-macro-arguments clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-declaration clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-exception-parameter clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid printf format specifier",
    "checkerName": "CppPrintfBadFormat",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.mpi.MPI-Checker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Zero constant can be replaced with nullptr",
    "checkerName": "CppZeroConstantCanBeReplacedWithNullptr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unnamed namespace in a header file",
    "checkerName": "CppUnnamedNamespaceInHeaderFile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-pass-by-value clang-tidy check",
    "checkerName": "CppClangTidyModernizePassByValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "register clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRegister",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "void-pointer-to-enum-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-multiple-statement-macro clang-tidy check",
    "checkerName": "CppClangTidyBugproneMultipleStatementMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-inefficient-vector-operation clang-tidy check",
    "checkerName": "CppClangTidyPerformanceInefficientVectorOperation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-calling-convention clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastCallingConvention",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ordered-compare-function-pointers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-redundant-branch-condition clang-tidy check",
    "checkerName": "CppClangTidyBugproneRedundantBranchCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension.",
    "checkerName": "CppMsExtNotInitializedStaticConstLocalVar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-dynamic-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-conditional-omitted-operand clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.portability.UnixAPI clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "class-varargs clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticClassVarargs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.coreFoundation.CFNumber clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-unnecessary-conversion clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationUnnecessaryConversion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check",
    "checkerName": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reserved-id-macro clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReservedIdMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullReturnedFromNonnull clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant parentheses",
    "checkerName": "CppRedundantParentheses",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullabilityBase clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-function-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastFunctionType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (incorrect indent size)",
    "checkerName": "CppWrongIndentSize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "delete-non-virtual-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.CallAndMessageModeling clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-charize clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftCharize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "valist.ValistBase clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerValistValistBase",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++17-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-function-ptr-dereference clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "called-once-parameter clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCalledOnceParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-prototypes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingPrototypes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-constant-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "address-of-temporary clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAddressOfTemporary",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "duplicate-method-match clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-pipe2 clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecPipe2",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Hiding local declaration",
    "checkerName": "CppDeclarationHidesLocal",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent UE4 UClass Naming",
    "checkerName": "CppUE4CodingStandardUClassNamingViolationError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "trigraphs clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTrigraphs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "framework-include-private-from-public clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-extra-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatExtraArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around parenthesis)",
    "checkerName": "CppBadParensLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-type-promotion-in-math-fn clang-tidy check",
    "checkerName": "CppClangTidyPerformanceTypePromotionInMathFn",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-func-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsequenced clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsequenced",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "duplicate-decl-specifier clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-epoll-create1 clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecEpollCreate1",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "frame-larger-than clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFrameLargerThan",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around operator symbols)",
    "checkerName": "CppBadSymbolSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-swapped-arguments clang-tidy check",
    "checkerName": "CppClangTidyBugproneSwappedArguments",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-explicit-virtual-functions clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-infinite-loop clang-tidy check",
    "checkerName": "CppClangTidyBugproneInfiniteLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "suggest-destructor-override clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-avoid-bind clang-tidy check",
    "checkerName": "CppClangTidyModernizeAvoidBind",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Zero initialization can be used instead of memset",
    "checkerName": "CppReplaceMemsetWithZeroInitialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "IndependentClass-attribute clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIndependentClassAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "signed-enum-bitfield clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSignedEnumBitfield",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unexpected syntax element",
    "checkerName": "CppSyntaxWarning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-static-accessed-through-instance clang-tidy check",
    "checkerName": "CppClangTidyReadabilityStaticAccessedThroughInstance",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration of a non-overriding virtual function in a final or sealed class",
    "checkerName": "CppVirtualFunctionInFinalClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-sign-overflow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftSignOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unusable-partial-specialization clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow-field-in-constructor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-no-assembler clang-tidy check",
    "checkerName": "CppClangTidyHicppNoAssembler",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-end-of-file clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter can be made pointer/reference to const",
    "checkerName": "CppParameterMayBeConstPtrOrRef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Not enough arguments in a call to printf",
    "checkerName": "CppPrintfMissedArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-loop-form clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenmpLoopForm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Result of a postfix operator is discarded",
    "checkerName": "CppDiscardedPostfixOperatorResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-inefficient-string-concatenation clang-tidy check",
    "checkerName": "CppClangTidyPerformanceInefficientStringConcatenation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-qual-unrelated clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastQualUnrelated",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "receiver-forward-class clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReceiverForwardClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.NewDelete clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusNewDelete",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-sign clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerSign",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-macros clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedMacros",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragma-pack clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaPack",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-mem57-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertMem57Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Mismatched class tags",
    "checkerName": "CppMismatchedClassTags",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-sanitizers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownSanitizers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-todo clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityTodo",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bitfield-enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-unnecessary-copy-initialization clang-tidy check",
    "checkerName": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declarator is only assigned but never accessed",
    "checkerName": "CppEntityAssignedButNoRead",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-static-assert clang-tidy check",
    "checkerName": "CppClangTidyMiscStaticAssert",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration does not declare anything",
    "checkerName": "CppEmptyDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-getter-return-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around braces)",
    "checkerName": "CppBadBracesSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ambiguous-ellipsis clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "private-module clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPrivateModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Implicit conversion to incompatible pointer type",
    "checkerName": "CppIncompatiblePointerConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "float-equal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFloatEqual",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.uninitialized.CapturedBlockVariable clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misleading-indentation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMisleadingIndentation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-function-declaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-smartptr-get clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantSmartptrGet",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cuda-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCudaCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dangling-initializer-list clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDanglingInitializerList",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-library-redeclaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "string-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStringConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-override clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseOverride",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred declaration style (enforce nested namespaces style)",
    "checkerName": "CppEnforceNestedNamespacesStyle",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "empty-body clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEmptyBody",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c2x-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreC2xCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++14-binary-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-noreturn clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidNoreturn",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "darwin-dispatch-once-nonstatic clang-tidy check",
    "checkerName": "CppClangTidyDarwinDispatchOnceNonstatic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-else-after-return clang-tidy check",
    "checkerName": "CppClangTidyLlvmElseAfterReturn",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-string-cstr clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantStringCstr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "local-type-template-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-declarations clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unreachable-code-loop-increment clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lambda can be rewritten to use explicit template parameters",
    "checkerName": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (space is missing elsewhere)",
    "checkerName": "CppMissingSpace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-alignof-expression clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuAlignofExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.cstring.NullArg clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixCstringNullArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-upgrade-duration-conversions clang-tidy check",
    "checkerName": "CppClangTidyAbseilUpgradeDurationConversions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-compare-conditional clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumCompareConditional",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "covered-switch-default clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.bcmp clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-prefer-member-initializer clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-macro-parentheses clang-tidy check",
    "checkerName": "CppClangTidyBugproneMacroParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.RetainCountBase clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-memfd-create clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecMemfdCreate",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "return-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-lambda-function-name clang-tidy check",
    "checkerName": "CppClangTidyBugproneLambdaFunctionName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "atomic-memory-ordering clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nsreturns-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNsreturnsMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecated",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-sealed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftSealed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-goto clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftGoto",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.bcopy clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++2a-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp2aExtensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "float-overflow-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFloatOverflowConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "complex-component-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticComplexComponentInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.performance.GCDAntipattern clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unicode-zero-width clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-function-size clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityFunctionSize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declarator is reassigned in all paths before being read",
    "checkerName": "CppInitializedValueIsAlwaysRewritten",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-include-next clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuIncludeNext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "embedded-directive clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEmbeddedDirective",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "strlcpy-strlcat-size clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-variable-declarations clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.osx.OSObjectCStyleCast clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "private-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPrivateHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-fio38-c clang-tidy check",
    "checkerName": "CppClangTidyCertFio38C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-implicit-conversion-in-loop clang-tidy check",
    "checkerName": "CppClangTidyPerformanceImplicitConversionInLoop",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.builtin.NoReturnFunctions clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "anonymous-pack-parens clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAnonymousPackParens",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "malformed-warning-check clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMalformedWarningCheck",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unreachable-code-return clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-simplify-boolean-expr clang-tidy check",
    "checkerName": "CppClangTidyReadabilitySimplifyBooleanExpr",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-time-comparison clang-tidy check",
    "checkerName": "CppClangTidyAbseilTimeComparison",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.Loops clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaLoops",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-altivec-src-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.NonNilReturnValue clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Special function without noexcept specification",
    "checkerName": "CppSpecialFunctionWithoutNoexceptSpecification",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extra-semi-stmt clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExtraSemiStmt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant elaborated type specifier",
    "checkerName": "CppRedundantElaboratedTypeSpecifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sometimes-uninitialized clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSometimesUninitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "constexpr-not-const clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConstexprNotConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "msvc-not-found clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMsvcNotFound",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-const-variable clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedConstVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-unused-using-decls clang-tidy check",
    "checkerName": "CppClangTidyMiscUnusedUsingDecls",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dll-attribute-on-redeclaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Static data member in an anonymous class is not allowed by the C++ standard",
    "checkerName": "CppStaticDataMemberInUnnamedStruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Action with this name does not exist",
    "checkerName": "CppUENonExistentInputAction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-performSelector-leaks clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "auto-disable-vptr-sanitizer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-avoid-c-arrays clang-tidy check",
    "checkerName": "CppClangTidyModernizeAvoidCArrays",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around statement braces)",
    "checkerName": "CppBadControlBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "signed-unsigned-wchar clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.NumberObjectConversion clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "option-ignored clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOptionIgnored",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "anon-enum-enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve a required coroutine function",
    "checkerName": "CppCoroutineCallResolveError",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (remove redundant braces)",
    "checkerName": "CppRemoveRedundantBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incomplete-umbrella clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompleteUmbrella",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Keyword 'default' is used as identifier",
    "checkerName": "CppDefaultIsUsedAsIdentifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "concurrency-mt-unsafe clang-tidy check",
    "checkerName": "CppClangTidyConcurrencyMtUnsafe",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-posix-return clang-tidy check",
    "checkerName": "CppClangTidyBugpronePosixReturn",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access specifier does not affect any declaration",
    "checkerName": "CppAccessSpecifierWithNoDeclarations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Reference class member with 'mutable' specifier",
    "checkerName": "CppMutableSpecifierOnReferenceMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-forward-declaration-namespace clang-tidy check",
    "checkerName": "CppClangTidyBugproneForwardDeclarationNamespace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-copy clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedCopy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-var-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl37-c clang-tidy check",
    "checkerName": "CppClangTidyCertDcl37C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "C++ standard library headers not found",
    "checkerName": "CppUESourceFileWithoutStandardLibrary",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "delegating-ctor-cycles clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "visibility clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVisibility",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-addition clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationAddition",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dangling-gsl clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDanglingGsl",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-make-shared clang-tidy check",
    "checkerName": "CppClangTidyModernizeMakeShared",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "compound-token-split-by-space clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abstract-final-class clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAbstractFinalClass",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-unnecessary-value-param clang-tidy check",
    "checkerName": "CppClangTidyPerformanceUnnecessaryValueParam",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'while' statement)",
    "checkerName": "CppEnforceWhileStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant empty statement",
    "checkerName": "CppRedundantEmptyStatement",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-simplify-subscript-expr clang-tidy check",
    "checkerName": "CppClangTidyReadabilitySimplifySubscriptExpr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-pragma-optimize clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Clang compiler error",
    "checkerName": "CppClangTidyClangDiagnosticError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-string-find-str-contains clang-tidy check",
    "checkerName": "CppClangTidyAbseilStringFindStrContains",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-msc50-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertMsc50Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "literal-range clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLiteralRange",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.SecKeychainAPI clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Lambda capture is never used",
    "checkerName": "CppLambdaCaptureNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modules-import-nested-redundant clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.MallocSizeof clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixMallocSizeof",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "qualified-void-return-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-global-names-in-headers clang-tidy check",
    "checkerName": "CppClangTidyGoogleGlobalNamesInHeaders",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "attribute-packed-for-bitfield clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "odr clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOdr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-local-typedef clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "method-signatures clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMethodSignatures",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around square brackets within a statement)",
    "checkerName": "CppBadSquareBracketsSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "static-float-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStaticFloatInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-increment-bool clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-compat-reserved-user-defined-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "protocol clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticProtocol",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pch-date-time clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPchDateTime",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-narrowing-conversions clang-tidy check",
    "checkerName": "CppClangTidyBugproneNarrowingConversions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.rand clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Taking an address of class r-value is non-standard Microsoft C++ extension",
    "checkerName": "CppMsExtAddressOfClassRValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Axis with this name does not exist",
    "checkerName": "CppUENonExistentInputAxis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-c-typedef-for-linkage clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-redeclared-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err60-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertErr60Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "infinite-recursion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInfiniteRecursion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Volatile-qualified parameter in a function declaration",
    "checkerName": "CppVolatileParameterInDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl51-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl51Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-equals-delete clang-tidy check",
    "checkerName": "CppClangTidyHicppUseEqualsDelete",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cxx-attribute-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCxxAttributeExtension",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around namespace braces)",
    "checkerName": "CppBadNamespaceBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-move-const-arg clang-tidy check",
    "checkerName": "CppClangTidyPerformanceMoveConstArg",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "distributed-object-modifiers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-header-anon-namespaces clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaHeaderAnonNamespaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "empty-translation-unit clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.MIG clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxMIG",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.cstring.BadSizeArg clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "array-bounds clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArrayBounds",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-fallthrough clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitFallthrough",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-mutable-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-void-pseudo-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Compile-time constant expression can be replaced by either 'true' or 'false'",
    "checkerName": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "rewrite-not-bool clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRewriteNotBool",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter can be made const",
    "checkerName": "CppParameterMayBeConst",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "excess-initializers clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExcessInitializers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-function-cognitive-complexity clang-tidy check",
    "checkerName": "CppClangTidyReadabilityFunctionCognitiveComplexity",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "portability-restrict-system-includes clang-tidy check",
    "checkerName": "CppClangTidyPortabilityRestrictSystemIncludes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly erroneous incomplete switch-statement",
    "checkerName": "CppIncompleteSwitchStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-namespace-comments clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityNamespaceComments",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-str34-c clang-tidy check",
    "checkerName": "CppClangTidyCertStr34C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullableReturnedFromNonnull clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred braces style (enforce braces in 'if' statement)",
    "checkerName": "CppEnforceIfStatementBraces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dollar-in-identifier-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-enum-enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred cv-qualifiers style (enforce the order of cv-qualifiers)",
    "checkerName": "CppEnforceCVQualifiersOrder",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.coreFoundation.CFError clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "redundant-move clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRedundantMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.strcpy clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "builtin-assume-aligned-alignment clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nested-anon-types clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNestedAnonTypes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "keyword-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticKeywordCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.getpw clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "integer-overflow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIntegerOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "documentation-deprecated-sync clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Structured binding can be used",
    "checkerName": "CppUseStructuredBinding",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "expansion-to-defined clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExpansionToDefined",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-int-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitIntConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "webkit.NoUncountedMemberChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dllimport-static-field-def clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-anonymous-struct clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-imaginary-constant clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-open clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecOpen",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-function-size clang-tidy check",
    "checkerName": "CppClangTidyReadabilityFunctionSize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-const-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftConstInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.bzero clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.DynamicTypePropagation clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undef clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicitly-unsigned-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-gpopt clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedGpopt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-property-ivar clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unavailable-declarations clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnavailableDeclarations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-division clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationDivision",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-forbidden-subclassing clang-tidy check",
    "checkerName": "CppClangTidyObjcForbiddenSubclassing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "void-pointer-to-int-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-overflow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftOverflow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "selector-type-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Local variable used without being initialized",
    "checkerName": "CppDeclaratorUsedBeforeInitialization",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "export-using-directive clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExportUsingDirective",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-result clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedResult",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err34-c clang-tidy check",
    "checkerName": "CppClangTidyCertErr34C",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-unused-return-value clang-tidy check",
    "checkerName": "CppClangTidyBugproneUnusedReturnValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-empty-initializer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "documentation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDocumentation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unreachable-code-break clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-redundant-void-arg clang-tidy check",
    "checkerName": "CppClangTidyModernizeRedundantVoidArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-enum-forward-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-header-guard clang-tidy check",
    "checkerName": "CppClangTidyLlvmHeaderGuard",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-misplaced-const clang-tidy check",
    "checkerName": "CppClangTidyMiscMisplacedConst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-objc-avoid-nsobject-new clang-tidy check",
    "checkerName": "CppClangTidyGoogleObjcAvoidNsobjectNew",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (tabs are prohibited)",
    "checkerName": "CppTabsAreDisallowed",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-string-integer-assignment clang-tidy check",
    "checkerName": "CppClangTidyBugproneStringIntegerAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-integer-division clang-tidy check",
    "checkerName": "CppClangTidyBugproneIntegerDivision",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-nodiscard clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseNodiscard",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-use-after-move clang-tidy check",
    "checkerName": "CppClangTidyBugproneUseAfterMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-anon-enum-enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bad-function-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBadFunctionCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-source-encoding clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-non-iso clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatNonIso",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (line indent should be restored to the previous level elsewhere)",
    "checkerName": "CppOutdentIsOffPrevLevel",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-move-constructor-init clang-tidy check",
    "checkerName": "CppClangTidyPerformanceMoveConstructorInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++14-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp14Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-constexpr clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidConstexpr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++2b-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp2bCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "webkit.RefCntblBaseVirtualDtor clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-missing-hash clang-tidy check",
    "checkerName": "CppClangTidyObjcMissingHash",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-declarations clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingDeclarations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred cv-qualifiers style (enforce the placement of cv-qualifiers)",
    "checkerName": "CppEnforceCVQualifiersPlacement",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred include directive style (slash symbol used in #include directive doesn't match code style settings)",
    "checkerName": "CppWrongSlashesInIncludeDirective",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-fixed-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "class-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticClassConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "slash-u-filename clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSlashUFilename",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bitfield-constant-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvmlibc-implementation-in-namespace clang-tidy check",
    "checkerName": "CppClangTidyLlvmlibcImplementationInNamespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "section clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSection",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-preprocessor clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantPreprocessor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Hiding an uncaptured local declaration",
    "checkerName": "CppDeclarationHidesUncapturedLocal",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pragma-system-header-outside-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "apiModeling.TrustNonnull clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-flexible-array clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-value-range-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "valist.Uninitialized clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerValistUninitialized",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unable-to-open-stats-file clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deadcode.DeadStores clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred overriding function style (enforce overriding function style)",
    "checkerName": "CppEnforceOverridingFunctionStyle",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ctad-maybe-unsupported clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inline-asm clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInlineAsm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect blank lines (blank lines are missing elsewhere)",
    "checkerName": "CppMissingBlankLines",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++20-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp20Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++17-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp17Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-copy-constructor-init clang-tidy check",
    "checkerName": "CppClangTidyBugproneCopyConstructorInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-retain-cycles clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcRetainCycles",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-string-find-startswith clang-tidy check",
    "checkerName": "CppClangTidyAbseilStringFindStartswith",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-new-delete-operators clang-tidy check",
    "checkerName": "CppClangTidyHicppNewDeleteOperators",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-using clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseUsing",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "atomic-implicit-seq-cst clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-too-small-loop-variable clang-tidy check",
    "checkerName": "CppClangTidyBugproneTooSmallLoopVariable",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-non-private-member-variables-in-classes clang-tidy check",
    "checkerName": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-return-braced-init-list clang-tidy check",
    "checkerName": "CppClangTidyModernizeReturnBracedInitList",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++20-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp20Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "xor-used-as-pow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticXorUsedAsPow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-redeclare-static clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-power-of-two-alignment clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-default-arg-redefinition clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "double-promotion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDoublePromotion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "redeclared-class-member clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRedeclaredClassMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "custom-atomic-properties clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCustomAtomicProperties",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-branch-clone clang-tidy check",
    "checkerName": "CppClangTidyBugproneBranchClone",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reorder-ctor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReorderCtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-string-compare clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousStringCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around empty braces)",
    "checkerName": "CppBadEmptyBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.InnerPointer clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-super-self clang-tidy check",
    "checkerName": "CppClangTidyObjcSuperSelf",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.uninitialized.UndefReturn clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-shrink-to-fit clang-tidy check",
    "checkerName": "CppClangTidyModernizeShrinkToFit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reinterpret-base-class clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReinterpretBaseClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "apiModeling.llvm.CastValue clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "align-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAlignMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-ios-deployment-target clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-mapping clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOpenmpMapping",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-easily-swappable-parameters clang-tidy check",
    "checkerName": "CppClangTidyBugproneEasilySwappableParameters",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-semicolon clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousSemicolon",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia.HandleChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "BlueprintCallable function can be made const",
    "checkerName": "CppUE4BlueprintCallableFunctionMayBeConst",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "absolute-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAbsoluteValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shadow-field clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShadowField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mpi-type-mismatch clang-tidy check",
    "checkerName": "CppClangTidyMpiTypeMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-pos47-c clang-tidy check",
    "checkerName": "CppClangTidyCertPos47C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extra-qualification clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExtraQualification",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-explicit conversion operator",
    "checkerName": "CppNonExplicitConversionOperator",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "auto-storage-class clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAutoStorageClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-this-capture clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-noexcept-move clang-tidy check",
    "checkerName": "CppClangTidyHicppNoexceptMove",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullability",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inconsistent-dllimport clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInconsistentDllimport",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl16-c clang-tidy check",
    "checkerName": "CppClangTidyCertDcl16C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Enumerator is never used",
    "checkerName": "CppEnumeratorNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-to-int-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerToIntCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "logical-not-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLogicalNotParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "char-subscripts clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCharSubscripts",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incomplete-module clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompleteModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "auto-import clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAutoImport",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "UPROPERTY macro call before declaration has no effect",
    "checkerName": "CppUPropertyMacroCallHasNoEffect",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "main-return-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMainReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant parameter list in lambda declarator",
    "checkerName": "CppRedundantLambdaParameterList",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "May be missing keyword 'throw'",
    "checkerName": "CppMissingKeywordThrow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-inline clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedInline",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fixed-enum-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFixedEnumExtension",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-inline function definition in a header file",
    "checkerName": "CppNonInlineFunctionDefinitionInHeaderFile",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nonportable-include-path clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonportableIncludePath",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-pointer-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-exception-escape clang-tidy check",
    "checkerName": "CppClangTidyOpenmpExceptionEscape",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-static-float-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c99-designator clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticC99Designator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "assume clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAssume",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "override-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverrideInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat-unnamed-type-template-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-pos44-c clang-tidy check",
    "checkerName": "CppClangTidyCertPos44C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nonnull clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonnull",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-initializer-from-system-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Binary operator acts on equal operands",
    "checkerName": "CppEqualOperandsInBinaryExpression",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declaration and assignment can be joined",
    "checkerName": "CppJoinDeclarationAndAssignment",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Some object members might not be initialized",
    "checkerName": "CppSomeObjectMembersMightNotBeInitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.UndefinedBinaryOperatorResult clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter names do not match",
    "checkerName": "CppParameterNamesMismatch",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-virtual class member function hidden in a derived class",
    "checkerName": "CppHiddenFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.NilArg clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-suspicious-memset-usage clang-tidy check",
    "checkerName": "CppClangTidyBugproneSuspiciousMemsetUsage",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "alloca-with-align-alignof clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "apiModeling.google.GTest clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-comparison-in-temp-failure-retry clang-tidy check",
    "checkerName": "CppClangTidyAndroidComparisonInTempFailureRetry",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Const-qualified parameter in a function declaration",
    "checkerName": "CppConstParameterInDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred declaration style (enforce type alias code style)",
    "checkerName": "CppEnforceTypeAliasCodeStyle",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++20-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-oop11-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertOop11Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-array-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.SelfAssignment clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-nsinvocation-argument-lifetime clang-tidy check",
    "checkerName": "CppClangTidyObjcNsinvocationArgumentLifetime",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Member function can be made static",
    "checkerName": "CppMemberFunctionMayBeStatic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-oop57-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertOop57Cpp",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.gets clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "NSObject-attribute clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNSObjectAttribute",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call",
    "checkerName": "CppAbstractVirtualFunctionCallInCtor",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-static-assert clang-tidy check",
    "checkerName": "CppClangTidyHicppStaticAssert",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant base class access specifier",
    "checkerName": "CppRedundantBaseClassAccessSpecifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bool-operation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBoolOperation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl21-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl21Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-runtime-operator clang-tidy check",
    "checkerName": "CppClangTidyGoogleRuntimeOperator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "include-next-outside-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Objects stored in non-uproperty member can be garbage collected at any time",
    "checkerName": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "duplicate-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDuplicateEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-delete-null-pointer clang-tidy check",
    "checkerName": "CppClangTidyReadabilityDeleteNullPointer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly invalid printf format specifier",
    "checkerName": "CppPrintfRiskyFormat",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-compat-deprecated-writable-strings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Polymorphic class with non-virtual public destructor",
    "checkerName": "CppPolymorphicClassWithNonVirtualPublicDestructor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "global-isel clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGlobalIsel",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "padded clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPadded",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-narrowing-conversions clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesNarrowingConversions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sync-fetch-and-nand-semantics-changed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.OSObjectRetainCount clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "language-extension-token clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticLanguageExtensionToken",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-cpp-macro clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-copy-with-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "self-move clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelfMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant qualifier",
    "checkerName": "CppRedundantQualifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullablePassedToNonnull clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown clang-tidy checks",
    "checkerName": "CppClangTidyHighlighting",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.NSError clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaNSError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-inline-cpp-without-extern clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unreachable-code clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnreachableCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-but-set-variable clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedButSetVariable",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-objc-bool-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "variadic-macros clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVariadicMacros",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-err52-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertErr52Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-vararg clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeVararg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misspelled-assumption clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMisspelledAssumption",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-trailing-return-type clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseTrailingReturnType",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-static-assert clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-include-order clang-tidy check",
    "checkerName": "CppClangTidyLlvmIncludeOrder",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "zero-as-null-pointer-constant clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-qual clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastQual",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.Vfork clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixVfork",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-enum-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-prototype-for-cc clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Class is never used",
    "checkerName": "CppClassNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-zero-length clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatZeroLength",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check",
    "checkerName": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-unused-raii clang-tidy check",
    "checkerName": "CppClangTidyBugproneUnusedRaii",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unresolved reference in doxygen comment",
    "checkerName": "CppDoxygenUnresolvedReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shorten-64-to-32 clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShorten64To32",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "switch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSwitch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-epoll-create clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecEpollCreate",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "parentheses-equality clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticParenthesesEquality",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Uninitialized dependent base class",
    "checkerName": "CppUninitializedDependentBaseClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "alloca clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAlloca",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "avr-rtlib-linking-quirks clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred include directive style (order of #include directives does not match code style settings)",
    "checkerName": "CppWrongIncludesOrder",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant cast expression",
    "checkerName": "CppRedundantCastExpression",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred 'auto' style (numeric type can be replaced with auto)",
    "checkerName": "CppUseAutoForNumeric",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-compat-binary-literal clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "delete-abstract-non-virtual-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Dereference operator limit is exceeded",
    "checkerName": "CppDereferenceOperatorLimitExceeded",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-macro-usage clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesMacroUsage",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++2a-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-align clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastAlign",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Type alias is never used",
    "checkerName": "CppTypeAliasNeverUsed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-variable clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedVariable",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-objc-pointer-introspection-performSelector clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "self-assign-field clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSelfAssignField",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-member-init clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-twine-local clang-tidy check",
    "checkerName": "CppClangTidyLlvmTwineLocal",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "conditional-type-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent UE4 Naming",
    "checkerName": "CppUE4CodingStandardNamingViolationWarning",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "boost-use-to-string clang-tidy check",
    "checkerName": "CppClangTidyBoostUseToString",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "portability-simd-intrinsics clang-tidy check",
    "checkerName": "CppClangTidyPortabilitySimdIntrinsics",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-nan clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedNan",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Explicit specialization in non-namespace scope",
    "checkerName": "CppExplicitSpecializationInNonNamespaceScope",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-no-namespace clang-tidy check",
    "checkerName": "CppClangTidyAbseilNoNamespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Parameter is always rewritten in function body before being read",
    "checkerName": "CppParameterValueIsReassigned",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-throw-keyword-missing clang-tidy check",
    "checkerName": "CppClangTidyBugproneThrowKeywordMissing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Expression which evaluates to zero is used as a null pointer constant",
    "checkerName": "CppZeroValuedExpressionUsedAsNullPointer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-compat-bind-to-temporary-copy clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "quoted-include-in-framework-header clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "global-constructors clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGlobalConstructors",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "zircon-temporary-objects clang-tidy check",
    "checkerName": "CppClangTidyZirconTemporaryObjects",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (line break is redundant elsewhere)",
    "checkerName": "CppRedundantLinebreak",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sizeof-array-argument clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSizeofArrayArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "main clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMain",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-label-as-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuLabelAsValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'typename' keyword",
    "checkerName": "CppRedundantTypenameKeyword",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-type-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerTypeMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-negative clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyNegative",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Object member might not be initialized",
    "checkerName": "CppObjectMemberMightNotBeInitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Syntax error in doxygen comment",
    "checkerName": "CppDoxygenSyntaxError",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant 'else' keyword",
    "checkerName": "CppRedundantElseKeyword",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "export-unnamed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExportUnnamed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-special-member-functions clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "declaration-after-statement clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-slicing clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesSlicing",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "non-pod-varargs clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNonPodVarargs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "many-braces-around-scalar-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "altera-single-work-item-barrier clang-tidy check",
    "checkerName": "CppClangTidyAlteraSingleWorkItemBarrier",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-convert-member-functions-to-static clang-tidy check",
    "checkerName": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-union-access clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-copy-with-user-provided-dtor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-bool-literals clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseBoolLiterals",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reserved-macro-identifier clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Defaulted special member function is implicitly deleted",
    "checkerName": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-empty-struct clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuEmptyStruct",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dtor-name clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDtorName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-visibility clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedVisibility",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-vararg clang-tidy check",
    "checkerName": "CppClangTidyHicppVararg",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-definitions-in-headers clang-tidy check",
    "checkerName": "CppClangTidyMiscDefinitionsInHeaders",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-constant-out-of-range-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-compound-literal-initializer clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "int-to-pointer-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIntToPointerCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-negative-value clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftNegativeValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "include-next-absolute-path clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bridge-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBridgeCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "apiModeling.llvm.ReturnValue clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "altera-id-dependent-backward-branch clang-tidy check",
    "checkerName": "CppClangTidyAlteraIdDependentBackwardBranch",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability-completeness-on-arrays clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "asm-operand-widths clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAsmOperandWidths",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-new-delete-overloads clang-tidy check",
    "checkerName": "CppClangTidyMiscNewDeleteOverloads",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "#pragma-messages clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPragmaMessages",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-enum-float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "header-hygiene clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticHeaderHygiene",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "range-loop-bind-reference clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticRangeLoopBindReference",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-auto-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuAutoType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-template-shadow clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Not enough arguments in a call to boost::format",
    "checkerName": "CppBoostFormatTooFewArgs",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-availability-without-sdk-settings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "strncat-size clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStrncatSize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.MismatchedDeallocator clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly unintended object slicing",
    "checkerName": "CppPossiblyUnintendedObjectSlicing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-factory-scale clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationFactoryScale",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-uniqueptr-delete-release clang-tidy check",
    "checkerName": "CppClangTidyReadabilityUniqueptrDeleteRelease",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Comparison of unsigned expression with 0",
    "checkerName": "CppUnsignedZeroComparison",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.NSAutoreleasePool clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "knr-promoted-parameter clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticKnrPromotedParameter",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "overriding-method-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-upgrade-googletest-case clang-tidy check",
    "checkerName": "CppClangTidyGoogleUpgradeGoogletestCase",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-friend clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedFriend",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (tabs/spaces mismatch)",
    "checkerName": "CppTabsAndSpacesMismatch",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-spuriously-wake-up-functions clang-tidy check",
    "checkerName": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-accept4 clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecAccept4",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "injected-class-name clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInjectedClassName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-flp30-c clang-tidy check",
    "checkerName": "CppClangTidyCertFlp30C",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.Dealloc clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "UFUNCTION macro call before declaration has no effect",
    "checkerName": "CppUFunctionMacroCallHasNoEffect",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-identifier-naming clang-tidy check",
    "checkerName": "CppClangTidyReadabilityIdentifierNaming",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "empty-decomposition clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEmptyDecomposition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly erroneous expression without side-effects",
    "checkerName": "CppExpressionWithoutSideEffects",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-too-large clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumTooLarge",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-string-literal-with-embedded-nul clang-tidy check",
    "checkerName": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Structured binding can be used instead of tie(..)",
    "checkerName": "CppReplaceTieWithStructuredBinding",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "function-multiversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFunctionMultiversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "profile-instr-unprofiled clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nontrivial-memaccess clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNontrivialMemaccess",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom",
    "checkerName": "CppUseEraseAlgorithm",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.uninitialized.Branch clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-use-emplace clang-tidy check",
    "checkerName": "CppClangTidyHicppUseEmplace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "noderef clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNoderef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.VLASize clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreVLASize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++20-designator clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp20Designator",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect indent (around declaration braces)",
    "checkerName": "CppBadDeclarationBracesIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Declarator disambiguated as a function declaration",
    "checkerName": "CppDeclaratorDisambiguatedAsFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.NullDereference clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreNullDereference",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.VariadicMethodTypes clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "atomic-property-with-user-defined-accessor clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "int-in-bool-context clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIntInBoolContext",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-narrowing clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11Narrowing",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "core.builtin.BuiltinFunctions clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "serialized-diagnostics clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSerializedDiagnostics",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-attributes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedAttributes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-avoid-c-arrays clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesAvoidCArrays",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvmlibc-callee-namespace clang-tidy check",
    "checkerName": "CppClangTidyLlvmlibcCalleeNamespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-bad-signal-to-kill-thread clang-tidy check",
    "checkerName": "CppClangTidyBugproneBadSignalToKillThread",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-bool-pointer-implicit-conversion clang-tidy check",
    "checkerName": "CppClangTidyBugproneBoolPointerImplicitConversion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "darwin-sdk-settings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDarwinSdkSettings",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-comparison clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationComparison",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "auto-var-id clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAutoVarId",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "writable-strings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticWritableStrings",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Awaiter type is not a class",
    "checkerName": "CppAwaiterTypeIsNotClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Access specifier does not change accessibility level",
    "checkerName": "CppRedundantAccessSpecifier",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "conditional-uninitialized clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConditionalUninitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-comma-subscript clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pre-c++2b-compat-pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPreCpp2bCompatPedantic",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "vector-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVectorConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "module-file-extension clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticModuleFileExtension",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "static-in-inline clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStaticInInline",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-function-size clang-tidy check",
    "checkerName": "CppClangTidyHicppFunctionSize",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unused-member-function clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnusedMemberFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "extra-tokens clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExtraTokens",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-sig30-c clang-tidy check",
    "checkerName": "CppClangTidyCertSig30C",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "aix-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAixCompat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "overriding-t-option clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverridingTOption",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "openmp-use-default-none clang-tidy check",
    "checkerName": "CppClangTidyOpenmpUseDefaultNone",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-no-builtin-names clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-type-confusion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatTypeConfusion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "binding-in-condition clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBindingInCondition",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-unary-static-assert clang-tidy check",
    "checkerName": "CppClangTidyModernizeUnaryStaticAssert",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bind-to-temporary-copy clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pointer-to-enum-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPointerToEnumCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bitfield-width clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBitfieldWidth",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-overloaded-operator clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaOverloadedOperator",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cast-of-sel-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCastOfSelType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-iboutlet clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidIboutlet",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unnamed-type-template-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-enum-compare-conditional clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-sysroot clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatibleSysroot",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "shift-op-parentheses clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticShiftOpParentheses",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-long-long clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11LongLong",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-optimization-argument clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cmse-union-leak clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCmseUnionLeak",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pedantic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPedantic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-faster-string-find clang-tidy check",
    "checkerName": "CppClangTidyPerformanceFasterStringFind",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Algorithm accepting an iterator and a count can be used",
    "checkerName": "CppUseAlgorithmWithCount",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.SuperDealloc clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "string-plus-int clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStringPlusInt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around semicolon)",
    "checkerName": "CppBadSemicolonSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nsconsumed-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNsconsumedMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-virtual-near-miss clang-tidy check",
    "checkerName": "CppClangTidyBugproneVirtualNearMiss",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-inotify-init1 clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecInotifyInit1",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "concurrency-thread-canceltype-asynchronous clang-tidy check",
    "checkerName": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'contains' member function can be used",
    "checkerName": "CppUseAssociativeContains",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++17-compat-mangling clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp17CompatMangling",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "multichar clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMultichar",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-auto clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseAuto",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-exception-spec-mismatch clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-variable-sized-type-not-at-end clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-no-int-to-ptr clang-tidy check",
    "checkerName": "CppClangTidyPerformanceNoIntToPtr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inconsistent-missing-override clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-default-arguments-declarations clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-member-init clang-tidy check",
    "checkerName": "CppClangTidyHicppMemberInit",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-redundant-access-specifiers clang-tidy check",
    "checkerName": "CppClangTidyReadabilityRedundantAccessSpecifiers",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "duplicate-protocol clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDuplicateProtocol",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "for-loop-analysis clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticForLoopAnalysis",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "mismatched-tags clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMismatchedTags",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-offsetof clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidOffsetof",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bool-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBoolConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "private-extern clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPrivateExtern",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Dependent template without 'template' keyword",
    "checkerName": "CppDependentTemplateWithoutTemplateKeyword",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "invalid-partial-specialization clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "static-local-in-inline clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticStaticLocalInInline",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-anon-tag clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "objc-property-declaration clang-tidy check",
    "checkerName": "CppClangTidyObjcPropertyDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Specified version of the engine project is not found",
    "checkerName": "CppUEIncorrectEngineDirectory",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reserved-identifier clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReservedIdentifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "arc-non-pod-memaccess clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "frame-address clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFrameAddress",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "apiModeling.StdCLibraryFunctions clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerApiModelingStdCLibraryFunctions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl50-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl50Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around statement braces)",
    "checkerName": "CppBadControlBracesLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-use-uncaught-exceptions clang-tidy check",
    "checkerName": "CppClangTidyModernizeUseUncaughtExceptions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "profile-instr-out-of-date clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++11-inline-namespace clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-inaccessible-base clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (line break is missing elsewhere)",
    "checkerName": "CppMissingLinebreak",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-suspicious-call-argument clang-tidy check",
    "checkerName": "CppClangTidyReadabilitySuspiciousCallArgument",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "braced-scalar-init clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticBracedScalarInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "misc-unused-alias-decls clang-tidy check",
    "checkerName": "CppClangTidyMiscUnusedAliasDecls",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-make-unique clang-tidy check",
    "checkerName": "CppClangTidyModernizeMakeUnique",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-misplaced-widening-cast clang-tidy check",
    "checkerName": "CppClangTidyBugproneMisplacedWideningCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "fuchsia-default-arguments-calls clang-tidy check",
    "checkerName": "CppClangTidyFuchsiaDefaultArgumentsCalls",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.UnusedIvars clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-cuda-version clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownCudaVersion",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-signed-char-misuse clang-tidy check",
    "checkerName": "CppClangTidyBugproneSignedCharMisuse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dangling-else clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDanglingElse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-implementations clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedImplementations",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-unsigned-char-zero-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-explicit converting constructor",
    "checkerName": "CppNonExplicitConvertingConstructor",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-build-using-namespace clang-tidy check",
    "checkerName": "CppClangTidyGoogleBuildUsingNamespace",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Guarded header has already been included",
    "checkerName": "CppHeaderHasBeenAlreadyIncluded",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-runtime-int clang-tidy check",
    "checkerName": "CppClangTidyGoogleRuntimeInt",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "at-protocol clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAtProtocol",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Precompiled header is not found",
    "checkerName": "CppPrecompiledHeaderNotFound",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "out-of-line-declaration clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unicode clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnicode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-beta clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyBeta",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reinterpret_cast is used instead of a static_cast",
    "checkerName": "CppReinterpretCastFromVoidPtr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "tautological-bitwise-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "multiple-move-vbase clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMultipleMoveVbase",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-invalid-specifier clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-abs clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedAbs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "overlength-strings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverlengthStrings",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "array-bounds-pointer-arithmetic clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cstring-format-directive clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCstringFormatDirective",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-pointer-subtraction clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullPointerSubtraction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-no-malloc clang-tidy check",
    "checkerName": "CppClangTidyHicppNoMalloc",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-constinit clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingConstinit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-misplaced-array-index clang-tidy check",
    "checkerName": "CppClangTidyReadabilityMisplacedArrayIndex",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reorder-init-list clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReorderInitList",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "thread-safety-attributes clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "vec-elem-size clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVecElemSize",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "exceptions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticExceptions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-int clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitInt",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "gnu-flexible-array-union-member clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-method-return-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingMethodReturnType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred overriding function style (enforce overriding destructor style)",
    "checkerName": "CppEnforceOverridingDestructorStyle",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "flag-enum clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFlagEnum",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-duration-subtraction clang-tidy check",
    "checkerName": "CppClangTidyAbseilDurationSubtraction",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-faster-strsplit-delimiter clang-tidy check",
    "checkerName": "CppClangTidyAbseilFasterStrsplitDelimiter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "altera-kernel-name-restriction clang-tidy check",
    "checkerName": "CppClangTidyAlteraKernelNameRestriction",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "division-by-zero clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDivisionByZero",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unknown-pragmas clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnknownPragmas",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "interrupt-service-routine clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInterruptServiceRoutine",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-terminating-continue clang-tidy check",
    "checkerName": "CppClangTidyBugproneTerminatingContinue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-deprecated-headers clang-tidy check",
    "checkerName": "CppClangTidyModernizeDeprecatedHeaders",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability-declspec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullabilityDeclspec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant void argument list",
    "checkerName": "CppRedundantVoidArgumentList",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cert-dcl59-cpp clang-tidy check",
    "checkerName": "CppClangTidyCertDcl59Cpp",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Inconsistent Naming",
    "checkerName": "CppInconsistentNaming",
    "severity": 3,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-explicit-constructor-call clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "missing-selector-name clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMissingSelectorName",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "old-style-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOldStyleCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "user-defined-literals clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUserDefinedLiterals",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.AutoreleaseWrite clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "disabled-macro-expansion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unsupported-dll-base-class-template clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "completion-handler clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCompletionHandler",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "inline-namespace-reopened-noninline clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "undefined-reinterpret-cast clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-dynamic-static-initializers clang-tidy check",
    "checkerName": "CppClangTidyBugproneDynamicStaticInitializers",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dtor-typedef clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDtorTypedef",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "flexible-array-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++98-c++11-c++14-c++17-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "dynamic-exception-spec clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unicode-homoglyph clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "#warnings clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticWarnings",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sizeof-array-decay clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSizeofArrayDecay",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c++14-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticCpp14Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-named-parameter clang-tidy check",
    "checkerName": "CppClangTidyHicppNamedParameter",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "constant-evaluated clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConstantEvaluated",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "'long' floats are not allowed by the C++ standard",
    "checkerName": "CppLongFloat",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-explicit-conversions clang-tidy check",
    "checkerName": "CppClangTidyHicppExplicitConversions",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Possibly uninitialized class member",
    "checkerName": "CppPossiblyUninitializedMember",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-conversion-floating-point-to-bool clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-string-compare clang-tidy check",
    "checkerName": "CppClangTidyReadabilityStringCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-macro-repeated-side-effects clang-tidy check",
    "checkerName": "CppClangTidyBugproneMacroRepeatedSideEffects",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-misleading-indentation clang-tidy check",
    "checkerName": "CppClangTidyReadabilityMisleadingIndentation",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "override-module clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticOverrideModule",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "nullability.NullPassedToNonnull clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.MissingSuperCall clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "date-time clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDateTime",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "altera-unroll-loops clang-tidy check",
    "checkerName": "CppClangTidyAlteraUnrollLoops",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "hicpp-uppercase-literal-suffix clang-tidy check",
    "checkerName": "CppClangTidyHicppUppercaseLiteralSuffix",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "format-insufficient-args clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "deprecated-enum-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "llvm-qualified-auto clang-tidy check",
    "checkerName": "CppClangTidyLlvmQualifiedAuto",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "bugprone-parent-virtual-call clang-tidy check",
    "checkerName": "CppClangTidyBugproneParentVirtualCall",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "return-stack-address clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReturnStackAddress",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect line breaks (around comma in lists)",
    "checkerName": "CppBadListLineBreaks",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ignored-pragmas clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIgnoredPragmas",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "comma clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticComma",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "sign-compare clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSignCompare",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ambiguous-macro clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticAmbiguousMacro",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incompatible-property-type clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "consumed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticConsumed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "security.insecureAPI.vfork clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cplusplus.PureVirtualCall clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "google-readability-avoid-underscore-in-googletest-name clang-tidy check",
    "checkerName": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (around angle brackets)",
    "checkerName": "CppBadAngleBracketsSpaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Incorrect spacing (tabs are prohibited except for indentation)",
    "checkerName": "CppTabsOutsideIndent",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Mixed serial and positional arguments for boost::format",
    "checkerName": "CppBoostFormatMixedArgs",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Use preferred declaration style (enforce function declaration style)",
    "checkerName": "CppEnforceFunctionDeclarationStyle",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "null-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticNullConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.coreFoundation.CFRetainRelease clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-deprecated-ios-base-aliases clang-tidy check",
    "checkerName": "CppClangTidyModernizeDeprecatedIosBaseAliases",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "instantiation-after-specialization clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "modernize-concat-nested-namespaces clang-tidy check",
    "checkerName": "CppClangTidyModernizeConcatNestedNamespaces",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-for-range-copy clang-tidy check",
    "checkerName": "CppClangTidyPerformanceForRangeCopy",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pedantic-core-features clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "unix.Malloc clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerUnixMalloc",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Final non-overriding virtual function",
    "checkerName": "CppFinalNonOverridingVirtualFunction",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "readability-const-return-type clang-tidy check",
    "checkerName": "CppClangTidyReadabilityConstReturnType",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c99-compat clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticC99Compat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "performance-no-automatic-move clang-tidy check",
    "checkerName": "CppClangTidyPerformanceNoAutomaticMove",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "c99-extensions clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticC99Extensions",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "microsoft-using-decl clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "abseil-redundant-strcat-calls clang-tidy check",
    "checkerName": "CppClangTidyAbseilRedundantStrcatCalls",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "uninitialized clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticUninitialized",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Dependent type without 'typename' keyword",
    "checkerName": "CppDependentTypeWithoutTypenameKeyword",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-init-variables clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesInitVariables",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "vexing-parse clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticVexingParse",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "incomplete-implementation clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticIncompleteImplementation",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "pass-failed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPassFailed",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "packed clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticPacked",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "osx.ObjCProperty clang static analyzer check",
    "checkerName": "CppClangTidyClangAnalyzerOsxObjCProperty",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension",
    "checkerName": "CppMsExtReinterpretCastFromNullptr",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "implicit-int-float-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "final-dtor-non-final-class clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "reorder clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticReorder",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "android-cloexec-creat clang-tidy check",
    "checkerName": "CppClangTidyAndroidCloexecCreat",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "enum-enum-conversion clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticEnumEnumConversion",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-interfaces-global-init clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "cppcoreguidelines-pro-type-const-cast clang-tidy check",
    "checkerName": "CppClangTidyCppcoreguidelinesProTypeConstCast",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "suggest-override clang diagnostic",
    "checkerName": "CppClangTidyClangDiagnosticSuggestOverride",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_CPP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown template)",
    "checkerName": "Mvc.TemplateNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown view component view)",
    "checkerName": "Mvc.ViewComponentViewNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown controller)",
    "checkerName": "Mvc.ControllerNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (mismatch Model Type)",
    "checkerName": "Mvc.InvalidModelType",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown view)",
    "checkerName": "Mvc.ViewNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown action)",
    "checkerName": "Mvc.ActionNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ASP.NET Warning",
    "checkerName": "Asp.Warning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Cannot resolve resource",
    "checkerName": "ResourceNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown symbol",
    "checkerName": "Asp.NotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unsupported pageParserFilterType",
    "checkerName": "Asp.CustomPageParserFilterType",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Invalid control type",
    "checkerName": "Asp.InvalidControlType",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Wrong image size",
    "checkerName": "Asp.Image",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Redundant using directive",
    "checkerName": "RedundantUsingDirective",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Non-accessed field (non-private accessibility)",
    "checkerName": "NotAccessedField.Global",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown area)",
    "checkerName": "Mvc.AreaNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown masterpage)",
    "checkerName": "Mvc.MasterpageNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown content placeholder",
    "checkerName": "Asp.ContentPlaceholderNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Typo in markup attribute value",
    "checkerName": "MarkupAttributeTypo",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Attribute with optional value problem",
    "checkerName": "Asp.TagAttributeWithOptionalValue",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused register directive",
    "checkerName": "AspUnusedRegisterDirectiveHighlighting",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Typo in markup text",
    "checkerName": "MarkupTextTypo",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ASP.NET Dead Code",
    "checkerName": "Asp.DeadCode",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ASP.NET Resolve Warning",
    "checkerName": "Asp.ResolveWarning",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unused import clause",
    "checkerName": "UnusedImportClause",
    "severity": 2,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Object data source method resolve problem",
    "checkerName": "AspOdsMethodReferenceResolveError",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown theme",
    "checkerName": "Asp.ThemeNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "Unknown skin",
    "checkerName": "Asp.SkinNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown partial view)",
    "checkerName": "Mvc.PartialViewNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "MVC (unknown view component)",
    "checkerName": "Mvc.ViewComponentNotResolved",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  },
  {
    "checkerDesc": "ASP Errors",
    "checkerName": "AspErrors",
    "severity": 1,
    "checkerCategory": "CODE_DEFECT",
    "checkerLanguage": [
      "C_SHARP"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": ["系统推荐"],
    "checkerProps": []
  }
]