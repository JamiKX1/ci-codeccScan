[
  {
    "checkerName": "deadcode/unused",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测无用代码",
    "checkerTypeSort": "4",
    "checkerDesc": "%s 未使用的函数",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "errcheck/retvalue",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检查是否使用错误返回值。",
    "checkerTypeSort": "4",
    "checkerDesc": "没有检查返回值",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/calls",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "0",
    "checkerDesc": "审查不安全的调用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "安全规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/crypto",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "0",
    "checkerDesc": "1、crypto/rc4已被列入import的黑名单中；\n2、硬编码凭证；\n3、crypto/md5已被列入import的黑名单中；\n4、使用了弱的加密方法；\n5、RSA Key至少应该有%d位(bits)；\n6、crypto/des已被列入import的黑名单中；\n7、使用弱的数字随机生成器（使用math/rand，而不是crypto/rand）；\n",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "安全规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/error",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "没有处理错误",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/escape",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "该方法不会自动转义HTML。验证数据格式良好。",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/file",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "在tmp目录创建文件没有使用ioutil.Tempfile",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/httpoxy",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeSort": "0",
    "checkerDesc": "net/http/cgi已被列入import的黑名单中：Go版本低于1.6.3容易受到Httpoxy的攻击：(CVE-2016-5386)；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "安全规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/modulus",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "检查模数是否为0",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/network",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "0",
    "checkerDesc": "绑定了所有网络接口",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/permission",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "0",
    "checkerDesc": "1、文件至少需要%#o的权限；\n2、目录至少需要%#o的权限；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "安全规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/sql",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "1、使用了SQL字符拼接；\n2、使用了SQL字符格式化；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/subprocess",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "2",
    "checkerDesc": "1、子进程启动时传入了部分路径；\n2、检查子进程的启动；\n3、子进程启动使用了变量参数；\n4、子进程启动时传入了变量；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gas/tls",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "通过扫描Go AST（抽象语法数）来检查源代码的安全问题。",
    "checkerTypeSort": "0",
    "checkerDesc": "1、PreferServerCipherSuites设为false；\n2、MinVersion太低；\n3、InsecureSkipVerify设为true；\n4、InsecureSkipVerify可能为true；\n5、MaxVersion太低；\n6、MinVersion可能太低；\n7、PreferServerCipherSuites可能为false；\n8、MaxVersion可能太低；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "安全规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "goconst/string",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "查找可以被常量替换的重复字符串",
    "checkerTypeSort": "4",
    "checkerDesc": "重复使用的字符串应提取为常量：在 %s:%d:%d:%d 也使用了字符串 \"%s\"，文件为： %s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gofmt/notformat",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "检查代码是否格式正确以及是否无法进一步简化",
    "checkerTypeSort": "1",
    "checkerDesc": "文件没有使用 gofmt -s 格式化 [tencent standards/go 2.1](https://{github.com/xxxxx}/standards/go#21-%E5%BF%85%E9%A1%BB%E6%A0%BC%E5%BC%8F%E5%8C%96)",
    "checkerDescModel": "文件没有使用 gofmt -s 格式化",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "goimports/notimport",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "检查丢失或未引用的软件包导入",
    "checkerTypeSort": "2",
    "checkerDesc": "文件没有被goimport [tencent standards/go 2.4](https://{github.com/xxxxx}/standards/go#24-%E5%BF%85%E9%A1%BBimport%E8%A7%84%E8%8C%83)",
    "checkerDescModel": "文件没有被goimport",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/args",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "context.Context应该是函数的第一个参数",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/comment",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、exported类型%s %s应该有它自己的声明；\n2、exported类型变量应该有注释，或者改成非exported类型；\n3、exported类型 %s %s应该有注释%s，或者设置为unexported类型；\n4、exported类型 %s %s应该有注释，或者设置为unexported类型；\n5、在exported类型 %v的注释，形式应该是%v…；\n6、在exported类型%s %s的注释，形式应该是%s…；[tencent standards/go 3.4](https://{github.com/xxxxx}/standards/go#34-%E5%BF%85%E9%A1%BB%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A)，[tencent standards/go 3.5](https://{github.com/xxxxx}/standards/go#35-%E5%BF%85%E9%A1%BB%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A)",
    "checkerDescModel": "1、exported类型%s %s应该有它自己的声明；\n2、exported类型变量应该有注释，或者改成非exported类型；\n3、exported类型 %s %s应该有注释%s，或者设置为unexported类型；\n4、exported类型 %s %s应该有注释，或者设置为unexported类型；\n5、在exported类型 %v的注释，形式应该是%v…；\n6、在exported类型%s %s的注释，形式应该是%s…；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/convar",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "常量需要是全部大写",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/decl",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、应该丢弃 = %s，从变量%s声明中；它的值为0；\n2、应该省略类型%s，从变量%s声明中；它会从右手边推断出来；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/equivalent",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "应该省略range的第二个值；这个循环等效于`for %s %s range ...`",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/fnsize",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "检查函数体行数（逻辑代码行+注释行）是否超过设定值，默认80行 [tencent standards/go 6.4](https://{github.com/xxxxx}/standards/go#64-%E6%8E%A8%E8%8D%90%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0)",
    "checkerDescModel": "检查函数体行数（逻辑代码行+注释行）是否超过设定值，默认%s行",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": [
      {
        "propName": "fnsize",
        "propValue": "80",
        "displayValue": "80"
      }
    ]
  },
  {
    "checkerName": "golint/funccomment",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "函数需要有注释说明 [tencent standards/go 3.3](https://{github.com/xxxxx}/standards/go#33-%E5%BF%85%E9%A1%BB%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A)",
    "checkerDescModel": "函数需要有注释说明",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/funcpara",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "函数参数的首字母需要小写 [tencent standards/go 6.1](https://{github.com/xxxxx}/standards/go#61-%E6%8E%A8%E8%8D%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0)",
    "checkerDescModel": "函数参数的首字母需要小写",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/funcret",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "函数返回参数首字母需要小写 [tencent standards/go 6.1](https://{github.com/xxxxx}/standards/go#61-%E6%8E%A8%E8%8D%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0)",
    "checkerDescModel": "函数返回参数首字母需要小写",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/interfacecomment",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "接口需要有注释说明 [tencent standards/go 3.3](https://{github.com/xxxxx}/standards/go#33-%E5%BF%85%E9%A1%BB%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A)",
    "checkerDescModel": "接口需要有注释说明",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/naming",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、%s 名称会被其他packages以 %s.%s引用，可以考虑这样调用 %s；\n2、error变量%s应该以%sFoo形式命名；\n3、Go名称不应该使用全部大写，请使用驼峰格式；\n4、Go名称不应该使用k开头；%s %s应该是%s；\n5、%s %s 应该是 %s；\n6、receiver名称不应该有下划线，如果是不使用的，可以省略；\n7、receiver名称应该是其身份的反射；不要使用this或者self；\n8、receiver名称%s应该与之前的%s %s保持一致；\n9、Go名称不应该使用下划线；%s %s应该是%s；[tencent standards/go 4.3](https://{github.com/xxxxx}/standards/go#43-%E5%BF%85%E9%A1%BB%E7%BB%93%E6%9E%84%E4%BD%93%E5%91%BD%E5%90%8D)，[tencent standards/go 4.5](https://{github.com/xxxxx}/standards/go#45-%E5%BF%85%E9%A1%BB%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D)，[tencent standards/go 4.7](https://{github.com/xxxxx}/standards/go#47-%E5%BF%85%E9%A1%BB%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D)",
    "checkerDescModel": "1、%s 名称会被其他packages以 %s.%s引用，可以考虑这样调用 %s；\n2、error变量%s应该以%sFoo形式命名；\n3、Go名称不应该使用全部大写，请使用驼峰格式；\n4、Go名称不应该使用k开头；%s %s应该是%s；\n5、%s %s 应该是 %s；\n6、receiver名称不应该有下划线，如果是不使用的，可以省略；\n7、receiver名称应该是其身份的反射；不要使用this或者self；\n8、receiver名称%s应该与之前的%s %s保持一致；\n9、Go名称不应该使用下划线；%s %s应该是%s；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/nogoto",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "禁止使用goto",
    "checkerTypeSort": "2",
    "checkerDesc": "业务代码禁止使用goto，其他框架或底层源码推荐尽量不用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/noptr",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "不建议map、chan类型使用指针类型 [tencent standards/go 6.1](https://{github.com/xxxxx}/standards/go#61-%E6%8E%A8%E8%8D%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0)",
    "checkerDescModel": "不建议map、chan类型使用指针类型",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/package",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、package注释开头不应该有空格；\n2、空的import应只能在main或test package里面，或者使用注释说明；\n3、package需要写注释；\n4、不应该使用 . imports 形式；\n5、package注释与声明之间不应该有空行；\n6、package名称不应该有下划线；\n7、package注释应该是该种形式 %s；[tencent standards/go 3.1](https://{github.com/xxxxx}/standards/go#31-%E5%BF%85%E9%A1%BB%E5%8C%85%E6%B3%A8%E9%87%8A)，[tencent standards/go 4.1](https://{github.com/xxxxx}/standards/go#41-%E6%8E%A8%E8%8D%90%E5%8C%85%E5%91%BD%E5%90%8D)",
    "checkerDescModel": "1、package注释开头不应该有空格；\n2、空的import应只能在main或test package里面，或者使用注释说明；\n3、package需要写注释；\n4、不应该使用 . imports 形式；\n5、package注释与声明之间不应该有空行；\n6、package名称不应该有下划线；\n7、package注释应该是该种形式 %s；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/print",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": " %s(fmt.Sprintf(...)) 不符合要求，应该使用 %s.Errorf(...)替换之",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/replace",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "应该替换%s以%s%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/ret",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、当返回多个值时，错误值应该放到最后；\n2、exported类型 %s %s 返回unexported类型 %s，这会造成使用上的困扰；\n3、if语块以return语句结束，那么可以删去else分支并将else内的语句移到if语块外；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/string",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "错误字符串不应该大写，或者标点符号、新行结尾",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/structcomment",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "结构体需要有注释说明 [tencent standards/go 3.2](https://{github.com/xxxxx}/standards/go#32-%E5%BF%85%E9%A1%BB%E7%BB%93%E6%9E%84%E4%BD%93%E6%B3%A8%E9%87%8A)",
    "checkerDescModel": "结构体需要有注释说明",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/todo",
    "severity": 4,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "检测注释中出现的todo单词 [tencent standards/go 3.3](https://{github.com/xxxxx}/standards/go#33-%E5%BF%85%E9%A1%BB%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A)",
    "checkerDescModel": "检测注释中出现的todo单词",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "golint/type",
    "severity": 3,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "Google的linter，侧重于代码风格",
    "checkerTypeSort": "1",
    "checkerDesc": "1、不应该使用基础类型 %s 作为context.WithValue的key；\n2、var %s 是类型 %v，不要使用unit-specific后缀 %q；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gosimple/boolcmp",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测可简化的代码",
    "checkerTypeSort": "4",
    "checkerDesc": "应该省略bool常量的比较，可以简化为：%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gosimple/copy",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测可简化的代码",
    "checkerTypeSort": "4",
    "checkerDesc": "应该使用copy()而不是循环",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gosimple/for",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测可简化的代码",
    "checkerTypeSort": "4",
    "checkerDesc": "应该使用for range，而不是 for select{}",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gosimple/sendrecv",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测可简化的代码",
    "checkerTypeSort": "4",
    "checkerDesc": "应该使用简单通道的send/receive，而不是select",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "gosimple/usageadvice",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测可简化的代码",
    "checkerTypeSort": "4",
    "checkerDesc": "1、应该转换 %s(类型为%s）到%s，而不是使用struct结构；\n2、应该使用 for {} 而不是 for true {}；\n3、不必要的nil检查；\n4、应该使用原生字符串 (`...`)及regexp.%s避免转义两次；\n5、应该使用无条件的 %s.%s 来替换这个if语句；\n6、当 %s 为true时，%s不可能为nil；\n7、应该写 %s 而不是 %s；\n8、应该在新的一行里合并变量的声明和赋值；\n9、多余的break语句；\n10、应该使用fmt.Errorf(...)，而不是errors.New(fmt.Sprintf(...))；\n11、应该省略nil检查；%s执行len()定义为0；\n12、应该使用%s = append(%s, %s...) 来替换循环；\n13、使用slice时应该省略第二个index，s[a:len(s)] 等效于 s[a:]；\n14、应该使用time.Util，而不是t.Sub(time.Now())；\n15、应该使用%v.String()方法而不是%v；\n16、if %s != nil { return %s }; return %s' 可以简化为 'return %s'；\n17、'_ = <-ch' 可以简化为 '<-ch'；\n18、应该使用 'return <expr>'，而不是 'if <expr> { return <bool> }; return <bool>'；\n19、应该使用String()，而不是fmt.Sprintf；\n20、应该使用%v.Bytes()方法而不是%v；\n21、应该使用 %s%s.%s(%s)；\n22、应该使用time.Since，而不是time.Now().Sub；\n23、多余的return语句；\n24、应该使用make(%s, %s)；\n25、应该使用%sbytes.Equal(%s)；\n26、应该使用make(%s)；\n27、参数已经是字符串，没有必要使用fmt.Sprintf；\n28、应该使用copy(%s[:%s], %s[%s:])；\n29、参数的基础类型是字符串，应该使用简单的转换而不是使用fmt.Sprintf；\n30、应该省略range的值；这个循环等效与 `for range ...`；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "ineffassign/assign",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测没有使用到的现有变量的赋值",
    "checkerTypeSort": "4",
    "checkerDesc": "无效赋值：%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "最佳实践"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "interfacer/interface",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "建议可以使用的更精准的接口",
    "checkerTypeSort": "4",
    "checkerDesc": "%s 可以为 %s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "maligned/size",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": " 检测Go结构的工具，如果结果的字段被排序，将会占用更少的内存",
    "checkerTypeSort": "4",
    "checkerDesc": "%s：结构大小%d 可以为 %d",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "misspell/spell",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "发现通常拼写错误的英文单词",
    "checkerTypeSort": "1",
    "checkerDesc": "%s 应拼写为 %s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "风格规则"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "nakedret/ret",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeDesc": "检测空返回值",
    "checkerTypeSort": "1",
    "checkerDesc": "检查named return语句的函数体是否超过一定数值，默认是5行",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "safesql/sql",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "安全相关",
    "checkerTypeDesc": "检测潜在的sql注入漏洞",
    "checkerTypeSort": "0",
    "checkerDesc": "潜在不安全的SQL语句",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/append",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "append的结果不会被使用，除非在其他的appends里",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/args",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、参数%s在使用前被覆写了；\n2、该函数类似print风格的函数，有第一个动态参数，但没有其他更多的参数。应该使用print风格的函数。；\n3、io.Seeker的第一个参数是偏移值offset，但是使用了io.Seek*常量；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/assign",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、%s 自赋值为 %s；\n2、赋值给nil map；\n3、不应该赋值给%s；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/boolean",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "对于boolean类型的双重否定是没有效果的，是笔误吗？",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/break",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "break语句没有效果，是希望跳出外部循环吗？",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/compare",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、比较两个不同长度的字符串是否相等，会永远返回false；\n2、无符号数不可能 < 0；\n3、无符号数永远 >= 0；\n4、x %s 0的结果永远等于x；\n5、没有数值等于NaN，即使Nan本身；\n6、x & 0的结果永远等于 0；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/condition",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "这个条件多次出现在if/else if链中",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/defer",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、刚好在lock之后defer %s，你是想defer %s吗？；\n2、defer %s 前，应该先检查返回的错误码；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/deprecated",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "%s 已经废弃：%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/efficient",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "m[string(key)] 可能比 k := string(key); m[k] 更加高效",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/emptybranch",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "空的分支",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/exec",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "exec.Command的第一个参数看起来是shell命令，但是缺少了程序名或者路径",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/exit",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "TestMain应该调用os.Exit来设置退出码",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/exp",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、%s操作符两边存在相同的表达式；\n2、二元表达式永远是 %t，对于所有可能的值（%s %s %s）；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/explicit",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "只有第1个常量是显式类型",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/finalizer",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "finalizer closes over the object, preventing the finalizer from ever running (at %s)",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/goroutine",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "goroutine调用T.%s，作为测试test必须在相同的goroutine里调用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/httpheader",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "在http.Header里的keys都是规范化的，然而%q并不符合规范；修改该常量或者使用http.CanonicalHeaderKey",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/infinite",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "调用了无限递归",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/iowriter",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "io.Writer.Write 不能修改所提供的buffer缓冲区，即使是临时性的",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/loop",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、在range循环中，defers不会运行，除非通道被关闭；\n2、循环变量没有变化；\n3、循环条件一直没有变化，或者存在竞争条件；\n4、外层循环无条件终止；\n5、这个循环会spin，导致100%CPU的使用；\n6、无限循环中的defers永远不会运行；\n7、在for+select循环中不应该存在空的default case，会导致循环spin；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/overrun",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "index索引超出界限（bounds）",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/resource",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "空的临界区（critical section)",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/return",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "%s 是一个纯函数（pure function），但是它的返回值被忽略了",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/routine",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "启动goroutine前应该先调用%s，以避免竞争",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/signal",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、%s 信号不能被捕获；\n2、%s 不能被捕获（是syscall.SIGTERM吗？）；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/simple",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "1、文件模式 %s 计算结果是 %#o；是否应该是 0%s；\n2、&*x 可以简化为 x。这个用法不会复制x。；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/sleep",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "睡眠 %d（ns）很可能是一个bug。如果不是的话请明确下:%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/timeticker",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "使用time.Tick在某些场景下会泄漏。可以考虑在endless function中使用，或者使用time.NewTicker。",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "staticcheck/unused",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "静态检测bug，包括明显的bug和比较微妙的bug",
    "checkerTypeSort": "2",
    "checkerDesc": "这个变量%s的值不会被使用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "structcheck/field",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测无用的struct域",
    "checkerTypeSort": "4",
    "checkerDesc": "未使用的struct字段",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "tosa/comment_ratio",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "腾讯开源注释率要求不少于10%",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "comment-ratio",
        "propValue": "10",
        "displayValue": "10"
      }
    ]
  },
  {
    "checkerName": "tosa/fn_length",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "函数名长度限制",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "func-name-length",
        "propValue": "35",
        "displayValue": "35"
      }
    ]
  },
  {
    "checkerName": "tosa/indent",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "缩进使用tab",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "tosa/license",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "腾讯开源文件头需要包含开源协议信息",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "tosa/linelength",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "源码每一行字符数不能超过指定阈值，默认阈值为120 [tencent standards/go 2.2](https://{github.com/xxxxx}/standards/go#22-%E6%8E%A8%E8%8D%90%E6%8D%A2%E8%A1%8C)",
    "checkerDescModel": "源码每一行字符数限制为%s",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": [
      {
        "propName": "line-length",
        "propValue": "120",
        "displayValue": "120"
      }
    ]
  },
  {
    "checkerName": "tosa/newline",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "风格规范",
    "checkerTypeSort": "1",
    "checkerDesc": "源码文件禁止使用回车字符（CR）",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "tosa/utf8",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeSort": "4",
    "checkerDesc": "文件编码必须是utf8",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "腾讯开源"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unconvert/convert",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "检测过于频繁的类型转换",
    "checkerTypeSort": "2",
    "checkerDesc": "不必要的转换",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unparam/unused",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测无用的函数参数",
    "checkerTypeSort": "4",
    "checkerDesc": "参数%s没有使用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unparam/value",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测无用的函数参数",
    "checkerTypeSort": "4",
    "checkerDesc": "1、参数始终接收%v；\n2、参数%s始终是%s；",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "unused/unused",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": " 检测无用的变量",
    "checkerTypeSort": "4",
    "checkerDesc": "%s没有被使用",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "varcheck/unused",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": "检测无用的全局变量和常量",
    "checkerTypeSort": "4",
    "checkerDesc": "未使用的全局变量",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "vet/vet",
    "severity": 2,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "最佳实践",
    "checkerTypeDesc": " 检测妨碍编译的错误",
    "checkerTypeSort": "4",
    "checkerDesc": " 检测妨碍编译的错误",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_DEFAULT",
    "checkerTag": [
      "系统推荐"
    ],
    "checkerProps": []
  },
  {
    "checkerName": "vetshadow/shadow",
    "severity": 1,
    "checkerCategory": "CODE_FORMAT",
    "checkerType": "逻辑相关",
    "checkerTypeDesc": "检测无意中被覆盖了的变量",
    "checkerTypeSort": "2",
    "checkerDesc": "%q的声明覆盖了%s位置的声明",
    "checkerLanguage": [
      "GOLANG"
    ],
    "checkerRecommend": "SYSTEM_RECOMMEND",
    "checkerTag": [
      "逻辑规则"
    ],
    "checkerProps": []
  }
]