{
  "array-bracket-spacing": [
    "error",
    "never"
  ],
  "array-callback-return": "warn",
  "arrow-body-style": [
    "warn",
    "as-needed"
  ],
  "arrow-parens": [
    "warn",
    "as-needed",
    {
      "requireForBlockBody": true
    }
  ],
  "arrow-spacing": "warn",
  "block-spacing": "error",
  "brace-style": "off",
  "camelcase": "off",
  "comma-dangle": [
    "warn",
    "always-multiline"
  ],
  "comma-spacing": "off",
  "comma-style": [
    "error",
    "last"
  ],
  "computed-property-spacing": [
    "warn",
    "never"
  ],
  "dot-notation": "off",
  "eol-last": [
    "error",
    "always"
  ],
  "eqeqeq": [
    "warn",
    "always"
  ],
  "func-call-spacing": "off",
  "func-style": [
    "off",
    "expression"
  ],
  "function-paren-newline": [
    "warn",
    "multiline"
  ],
  "generator-star-spacing": [
    "warn",
    {
      "before": false,
      "after": true
    }
  ],
  "id-length": "off",
  "implicit-arrow-linebreak": [
    "warn",
    "beside"
  ],
  "indent": "off",
  "key-spacing": "error",
  "keyword-spacing": "off",
  "linebreak-style": [
    "warn",
    "unix"
  ],
  "max-len": [
    "error",
    {
      "code": 120,
      "ignoreStrings": true,
      "ignoreUrls": true,
      "ignoreRegExpLiterals": true,
      "ignoreTemplateLiterals": true
    }
  ],
  "new-cap": [
    "error",
    {
      "newIsCap": true,
      "newIsCapExceptions": [],
      "capIsNew": false,
      "capIsNewExceptions": [
        "Immutable.Map",
        "Immutable.Set",
        "Immutable.List"
      ],
      "properties": false
    }
  ],
  "newline-per-chained-call": [
    "warn",
    {
      "ignoreChainWithDepth": 2
    }
  ],
  "no-array-constructor": "off",
  "no-case-declarations": "error",
  "no-confusing-arrow": "warn",
  "no-const-assign": "error",
  "no-dupe-class-members": "off",
  "no-else-return": [
    "warn",
    {
      "allowElseIf": false
    }
  ],
  "no-eval": "error",
  "no-iterator": "warn",
  "no-loop-func": "error",
  "no-mixed-operators": [
    "error",
    {
      "groups": [
        [
          "%",
          "**"
        ],
        [
          "%",
          "+"
        ],
        [
          "%",
          "-"
        ],
        [
          "%",
          "*"
        ],
        [
          "%",
          "/"
        ],
        [
          "&",
          "|",
          "<<",
          ">>",
          ">>>"
        ],
        [
          "==",
          "!=",
          "===",
          "!=="
        ],
        [
          "&&",
          "||"
        ]
      ],
      "allowSamePrecedence": false
    }
  ],
  "no-multi-assign": "error",
  "no-multiple-empty-lines": "error",
  "no-nested-ternary": "warn",
  "no-new-func": "error",
  "no-new-object": "error",
  "no-new-wrappers": "warn",
  "no-param-reassign": [
    "warn",
    {
      "props": true,
      "ignorePropertyModificationsFor": [
        "acc",
        "accumulator",
        "e",
        "ctx",
        "req",
        "request",
        "res",
        "response",
        "$scope",
        "staticContext",
        "state"
      ]
    }
  ],
  "no-plusplus": [
    "error",
    {
      "allowForLoopAfterthoughts": true
    }
  ],
  "no-prototype-builtins": "error",
  "no-restricted-properties": [
    "warn",
    {
      "object": "Math",
      "property": "pow",
      "message": "Please use ** instand"
    }
  ],
  "no-restricted-syntax": [
    "warn",
    {
      "selector": "ForInStatement",
      "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
    },
    {
      "selector": "LabeledStatement",
      "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
    },
    {
      "selector": "WithStatement",
      "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
    }
  ],
  "no-trailing-spaces": "error",
  "no-undef": "off",
  "no-underscore-dangle": "off",
  "no-unneeded-ternary": "warn",
  "no-unused-vars": "off",
  "no-useless-constructor": "off",
  "no-useless-escape": "error",
  "no-var": "error",
  "no-whitespace-before-property": "warn",
  "nonblock-statement-body-position": [
    "error",
    "beside"
  ],
  "object-curly-spacing": [
    "warn",
    "always"
  ],
  "object-shorthand": "warn",
  "one-var": [
    "warn",
    "never"
  ],
  "operator-linebreak": [
    "error",
    "before",
    {
      "overrides": {
        "=": "none"
      }
    }
  ],
  "padded-blocks": [
    "error",
    "never"
  ],
  "prefer-arrow-callback": "warn",
  "prefer-const": [
    "error",
    {
      "destructuring": "any",
      "ignoreReadBeforeAssign": false
    }
  ],
  "prefer-destructuring": [
    "warn",
    {
      "VariableDeclarator": {
        "array": false,
        "object": true
      },
      "AssignmentExpression": {
        "array": true,
        "object": false
      }
    },
    {
      "enforceForRenamedProperties": false
    }
  ],
  "prefer-rest-params": "warn",
  "prefer-spread": "warn",
  "prefer-template": "error",
  "quote-props": [
    "error",
    "as-needed",
    {
      "keywords": false
    }
  ],
  "quotes": "off",
  "radix": "warn",
  "semi": "off",
  "space-before-blocks": "error",
  "space-before-function-paren": "off",
  "space-in-parens": [
    "error",
    "never"
  ],
  "space-infix-ops": "error",
  "spaced-comment": [
    "error",
    "always",
    {
      "markers": [
        "/"
      ]
    }
  ],
  "template-curly-spacing": [
    "error",
    "never"
  ],
  "wrap-iife": [
    "error",
    "outside"
  ],
  "no-empty-function": "off",
  "no-invalid-this": "off",
  "no-magic-numbers": "off",
  "react/sort-comp": "off",
  "@typescript-eslint/adjacent-overload-signatures": "error",
  "@typescript-eslint/brace-style": "error",
  "@typescript-eslint/comma-spacing": [
    "error",
    {
      "before": false,
      "after": true
    }
  ],
  "@typescript-eslint/consistent-type-assertions": [
    "error",
    {
      "assertionStyle": "as",
      "objectLiteralTypeAssertions": "never"
    }
  ],
  "@typescript-eslint/consistent-type-definitions": "off",
  "@typescript-eslint/dot-notation": "warn",
  "@typescript-eslint/explicit-member-accessibility": "off",
  "@typescript-eslint/func-call-spacing": [
    "error",
    "never"
  ],
  "@typescript-eslint/indent": [
    "warn",
    2,
    {
      "SwitchCase": 1,
      "VariableDeclarator": 1,
      "outerIIFEBody": 1,
      "FunctionDeclaration": {
        "parameters": 1,
        "body": 1
      },
      "FunctionExpression": {
        "parameters": 1,
        "body": 1
      },
      "CallExpression": {
        "arguments": 1
      },
      "ArrayExpression": 1,
      "ObjectExpression": 1,
      "ImportDeclaration": 1,
      "flatTernaryExpressions": false,
      "ignoredNodes": [
        "JSXElement",
        "JSXElement > *",
        "JSXAttribute",
        "JSXIdentifier",
        "JSXNamespacedName",
        "JSXMemberExpression",
        "JSXSpreadAttribute",
        "JSXExpressionContainer",
        "JSXOpeningElement",
        "JSXClosingElement",
        "JSXFragment",
        "JSXOpeningFragment",
        "JSXClosingFragment",
        "JSXText",
        "JSXEmptyExpression",
        "JSXSpreadChild"
      ],
      "ignoreComments": false
    }
  ],
  "@typescript-eslint/keyword-spacing": [
    "error",
    {
      "overrides": {
        "if": {
          "after": true
        },
        "for": {
          "after": true
        },
        "while": {
          "after": true
        },
        "else": {
          "after": true
        }
      },
      "before": true,
      "after": true
    }
  ],
  "@typescript-eslint/member-ordering": [
    "error",
    {
      "default": [
        "public-static-field",
        "protected-static-field",
        "private-static-field",
        "static-field",
        "public-static-method",
        "protected-static-method",
        "private-static-method",
        "static-method",
        "public-instance-field",
        "protected-instance-field",
        "private-instance-field",
        "public-field",
        "protected-field",
        "private-field",
        "instance-field",
        "field",
        "constructor",
        "public-instance-method",
        "protected-instance-method",
        "private-instance-method",
        "public-method",
        "protected-method",
        "private-method",
        "instance-method",
        "method"
      ]
    }
  ],
  "@typescript-eslint/method-signature-style": "off",
  "@typescript-eslint/naming-convention": [
    "warn",
    {
      "selector": "function",
      "format": [
        "camelCase",
        "PascalCase"
      ]
    },
    {
      "selector": "variable",
      "format": [
        "camelCase",
        "UPPER_CASE"
      ]
    },
    {
      "selector": "variable",
      "modifiers": [
        "global"
      ],
      "format": [
        "camelCase",
        "PascalCase",
        "UPPER_CASE"
      ]
    },
    {
      "selector": "variable",
      "format": [
        "camelCase",
        "PascalCase"
      ],
      "types": [
        "function"
      ]
    },
    {
      "selector": "variable",
      "modifiers": [
        "exported"
      ],
      "format": [
        "UPPER_CASE"
      ],
      "types": [
        "boolean",
        "string",
        "number",
        "array"
      ]
    },
    {
      "selector": "variable",
      "modifiers": [
        "exported"
      ],
      "format": [
        "camelCase",
        "PascalCase"
      ],
      "types": [
        "function"
      ]
    },
    {
      "selector": [
        "class",
        "typeLike"
      ],
      "format": [
        "PascalCase"
      ]
    },
    {
      "selector": [
        "classMethod",
        "classProperty"
      ],
      "leadingUnderscore": "forbid",
      "trailingUnderscore": "forbid",
      "format": [
        "camelCase"
      ]
    }
  ],
  "@typescript-eslint/no-array-constructor": "error",
  "@typescript-eslint/no-dupe-class-members": "error",
  "@typescript-eslint/no-empty-interface": "error",
  "@typescript-eslint/no-inferrable-types": "warn",
  "@typescript-eslint/no-namespace": [
    "error",
    {
      "allowDeclarations": true,
      "allowDefinitionFiles": true
    }
  ],
  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
  "@typescript-eslint/no-parameter-properties": "off",
  "@typescript-eslint/no-require-imports": "error",
  "@typescript-eslint/no-this-alias": [
    "error",
    {
      "allowDestructuring": true
    }
  ],
  "@typescript-eslint/no-unused-expressions": [
    "error",
    {
      "allowShortCircuit": true,
      "allowTernary": true,
      "allowTaggedTemplates": true
    }
  ],
  "@typescript-eslint/no-unused-vars": [
    "error",
    {
      "args": "after-used",
      "ignoreRestSiblings": true
    }
  ],
  "@typescript-eslint/no-useless-constructor": "warn",
  "@typescript-eslint/prefer-for-of": "warn",
  "@typescript-eslint/prefer-function-type": "warn",
  "@typescript-eslint/prefer-namespace-keyword": "error",
  "@typescript-eslint/prefer-optional-chain": "error",
  "@typescript-eslint/quotes": [
    "warn",
    "single",
    {
      "allowTemplateLiterals": false
    }
  ],
  "@typescript-eslint/semi": [
    "error",
    "always"
  ],
  "@typescript-eslint/space-before-function-paren": [
    "error",
    {
      "anonymous": "always",
      "named": "never",
      "asyncArrow": "always"
    }
  ],
  "@typescript-eslint/triple-slash-reference": [
    "error",
    {
      "path": "never",
      "types": "always",
      "lib": "always"
    }
  ],
  "@typescript-eslint/type-annotation-spacing": "error",
  "@typescript-eslint/typedef": [
    "error",
    {
      "arrayDestructuring": false,
      "arrowParameter": false,
      "memberVariableDeclaration": false,
      "objectDestructuring": false,
      "parameter": false,
      "propertyDeclaration": true,
      "variableDeclaration": false
    }
  ],
  "@typescript-eslint/unified-signatures": "error"
}